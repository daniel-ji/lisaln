#!/bin/sh
#Save all scripts to ~/database/pipeline_script   Script template is ./template 

dotime=1;starts=`date +%s` ; starttime=`date`

thisfile=$0
doout=0
debug=0
force='';doless=0;download=1

oldline=$*   #all argvs
oldline1=`awk -v ins="$oldline" 'BEGIN{n=split(ins,a," ");for(i=1;i<n;i++){printf("%s ",a[i])}}'` #remove last argv
if [ -n "$1" ] ; then
 aaa=`echo "$1" | awk '{print substr($1,1,1);exit}'`  #check if first input is -XXX
 while [ "$aaa" == "-" ] ; do
  case $1 in
   -force)force=$1;shift;;
   -debug) debug=1; shift;;
   -less)doless=1;shift;;
   -nodownload)download=0;shift;;
   -out) output="$2"; doout=1;shift 2;;  #Use "$2" to pass argments with blank space inside as d='a b c''
   *) $0; echo "***Fatal error @ $0! Argument $1 is unrecoginized and ignored : $0 $oldline!" 1>&2 ; exit;;
  esac
  [ -n "$1" ] && aaa=`echo "$1" | awk '{print substr($1,1,1)}'` || aaa='NA'
 done
fi
[ $debug -eq 1 ] && echo $0 $oldline

if [ -n "$1" ] ; then 
 input="$1"
 if [ -n "$2" ] ; then
  output=$2; doout=1
 fi
else
cat << ttt
    ****NOTE: Copyright belongs to Dr. Hongzhi Li *******
 Convert between protein name, fasta sequence, refseq ID (NP_xxxx XP_xxx), NCBI GeneID, UniprotID
 Can also find proteins across species and human homology proteins
 Best to do so is ./UniProt_get (But only for fasta of first isomer)

# refseq_protein : The Reference Sequence (RefSeq) database is an open access, annotated and curated collection of publicly available 
# nucleotide sequences (DNA, RNA) and their protein products. ... DNA, RNA or protein) for major organisms ranging from 
# viruses to bacteria to eukaryotes. 
#  ID named as NP_xxxx (better, human curated), XP_xxx
https://www.ncbi.nlm.nih.gov/refseq/about/
Model RefSeq : RNA and protein products that are generated by the eukaryotic genome annotation pipeline. 
  These records use accession prefixes XM_, XR_, and XP_
Known RefSeq : RNA and protein products that are mainly derived from GenBank cDNA and EST data and are supported by the RefSeq eukaryotic curation group.
  These records use accession prefixes NM_, NR_, and NP_.

 To get best protein name, refseq ID from input fasta:
  ./NCBI_blast -refseq input.fasta

 To get fasta from IDs:
  1. First try HGNC database
  2. Failed then try download fasta by ./sequence_download 
  3. If no fasta can download, try NCBI homoloGene  

 Usage: $0 [Options] Input
 Options:
  -debug : debug model on
  -force : force to re-download NCBI blastp
  -out Output : User defined output for downloaded fasta file
  -less : less display
  -nodownload : will not download fasta seq

 Screen dump:
=> Best matching protein is from Blastp Refseq [Human] 1-2285a.a and 100.0% identity with refseq ID = NP_006006.3
Its name is: ARID1A
Its full name is: AT-rich interactive domain-containing protein 1A isoform a
 
 Example: 
  $0 A.fasta   #return best long protein name and refseq ID for fasta input
  $0 -out ARID1A.fasta.txt ARID1A   #get fasta and IDs for ARID1A
  $0 NM_139135  #input is refseqID
  $0 O14497   #input is uniprotID
  $0 8289     #input is NCBI GeneID
  $0 "AT-rich interaction domain 1A"   #Input is full name

 NOTE: To convert between PDB IDs, UniProtID (Q9BVA2), HUGO_gene_symbol(PCNA), NCBI_Refseq_Protein_ID(NP_001005745), 
   Ensembl_gene_identifier(ENSG00000125084), run ./IDs_gene_uniprot_convert ./PDB_geneID_Uniprot_convert 
   Best is ./UniProt_get
 NOTE: can also try easier version: ./IDs_gene_uniprot_convert. But this one can download fasta or use fasta as input
 
ttt
  exit
fi

extension=`echo $input | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
infile=`echo $input | awk '{l=length($1)-3;a=substr($1,l,4);if(a==".pdb"){print substr($1,1,l-1)}else{print $1}}'`
infile=`echo $input | awk '{n=split($1,a,".");printf("%s",a[1]);for(i=2;i<n;i++){printf(".%s",a[i])}}'`
#infile=`basename $input ${extension}`
[ $doout -ne 1 ] && output=$infile'_.xls'

#FATAL WARNing: NEVER delete following temp files! Otherwise last line will erase all files * in folder
# Not recommend to define temp=$0'_'$$'.tmp'  as temp has ./ ahead which may cause trouble when re-use it to define temp file name
temp=$$'.tmp';  temp2=$temp'2' ; temp3=$temp'3' ; temp4=$temp'4'; temp5=$temp'5'; temp6=$temp'6'

#Check root folder: scalemp1=p-gpu1; p-ngs=hpc
ed='/home/holi/database/pipeline_script/'
drd='/home/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My old computer
drd='/isi-dcnl/flower_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-ngs2
drd='/isi-flower/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-gpu1
drd='/net/isi-dcnl/ifs/user_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd ##holi@hpc-access1.coh.org
drd='/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@scalemp1
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My newest computer
thisfolder=`pwd`; thisfolder=$thisfolder'/'
if [ $thisfolder != $ed ] ; then
 cp -f $ed/back $ed/get $ed/NCBI_blast $ed/NCBI_homoloGene $ed/IDs_gene_uniprot_convert $ed/sequence_download .
fi

if [ -s $input ] ; then
#Input is fasta file
 ./NCBI_blast $force -refseq $input > $temp
 name=`grep 'Its name is:' $temp | tail -1 | awk '{print $4}'`
 [ "$name" != "" ] && $0 $name > $temp 
 if [ $doless -ne 1 ] ; then
  cat $temp
 else
  grep 'Best matching protein' $temp
  grep 'Its full name is:' $temp
  grep 'Its name is:' $temp
 fi
else
#Input is protein shortname or refseq ID
#./NCBI_homoloGene output:  Run in ARI1/
#NP_006006.3	ARID1A	H.sapiens	2285	 AT rich interactive domain 1A (SWI-like)
#XP_513235.4	ARID1A	P.troglodytes	2285	 AT rich interactive domain 1A (SWI-like)
#XP_002808326.1	LOC719949	M.mulatta	2224	 AT-rich interactive domain-containing protein 1A-like

 ./IDs_gene_uniprot_convert -i fullname "$input" > $temp  #check if fullname in HGNC
 nfound=`grep '=> Found' $temp | tail -1 | awk '{print $3}'`
 [ "$nfound" == "" ] && nfound=1
 if [ $nfound -eq 0 ] ; then
  ./IDs_gene_uniprot_convert -i shortname "$input" > $temp  #check if shortname in HGNC
  nfound=`grep '=> Found' $temp | tail -1 | awk '{print $3}'`
 fi
 [ "$nfound" == "" ] && nfound=1
 if [ $nfound -eq 0 ] ; then
  ./IDs_gene_uniprot_convert -i refseq "$input" > $temp #check if refseq in HGNC
  nfound=`grep '=> Found' $temp | tail -1 | awk '{print $3}'`
 fi
 [ "$nfound" == "" ] && nfound=1
 if [ $nfound -eq 0 ] ; then
  ./IDs_gene_uniprot_convert -i gene $input > $temp #check if NCBI GeneID  in HGNC
  nfound=`grep '=> Found' $temp | tail -1 | awk '{print $3}'`
 fi
 [ "$nfound" == "" ] && nfound=1
 if [ $nfound -eq 0 ] ; then
  ./IDs_gene_uniprot_convert -i uniprot $input > $temp #check if Uniprot  in HGNC
  nfound=`grep '=> Found' $temp | tail -1 | awk '{print $3}'`
 fi
 [ "$nfound" == "" ] && nfound=1
 if [ $nfound -gt 0 ] ; then
  sname=`grep shortName $temp | head -1 | awk '{print $2}'`
  fname=`grep fullName $temp | head -1 | awk '{for(i=2;i<=NF;i++){printf("%s ",$i)}}'`
  NP=`grep RefseqID $temp | head -1 | awk '{print $2}'`
  uniprot=`grep UniprotID $temp | head -1 | awk '{print $2}'`
  [ $doless -ne 1 ] && cat $temp
  if [ $download -eq 1 ] ; then
   [ $doout -eq 0 ] && output=$NP.fasta.txt
   if [ "$force" == "-force" ] || [ ! -s $output ] ; then
    ./sequence_download -gi -out $output $NP >& $temp2  #if input is refseqID as NM_ XM_, download sequence will be RNA!
   #./sequence_download -uniprot -gi -out $output $uniprot >& $temp2
     #if input is refseqID as NM_ XM_, download sequence will be RNA! try use -uniprot. But Uniprot show different seq!
   else
    [ $doless -ne 1 ] && echo "Use exsiting $output"
   fi
   [ $doless -ne 1 ] && echo "Fasta of $sname $NP saved in $output"
   length=`awk '{if(substr($1,1,1)!=">"){n=n+length($_)}}END{print n}' $output`
  fi
  echo "=> Best matching protein from HGNC is $sname ($uniprot) ${length}a.a with refseq ID = $NP" 
 else 
  [ $doout -eq 0 ] && output=$input.fasta.txt
  if [ "$force" == "-force" ] || [ ! -s $output ] ; then 
   ./sequence_download -gi -out $output "$input" >& $temp2  #try to download seq
  else
   [ $doless -ne 1 ] && echo "Use exsiting $output"
  fi
  if [ -s "$output" ] ; then
   [ $doless -ne 1 ] && echo "Cannot find records in HGNC database"
   [ $doless -ne 1 ] && echo "Download fasta of $input from NCBI saved in $output"
   isProtein=`echo $input | awk '{if(substr($1,2,2)=="P_"){print 1}else{print 0}}'`  #is it protein XP_ NP_?
   #if [ $isProtein -eq 1 ] ; then
    #$0 -less $output > $temp  #DO NOT open this. Will be dead loop
    #grep 'Best matching protein' $temp
    #fname=`grep 'Its full name is:' $temp | tail -1 | awk '{print $4}'`
    #sname=`grep 'Its name is:' $temp | tail -1 | awk '{print $4}'`    
   #else
    fname=`head -1 $output | awk '{for(i=2;i<=NF;i++){printf("%s ",$i)}}'`
   #fi
  else
   ./NCBI_homoloGene $force -less "$input" >& $temp   #Use homoloGene to determine if name not in HGNC
   [ $doless -ne 1 ] && cat $temp
   line=`grep 'H.sapiens' $temp | head -1`
   NP=`echo $line | awk '{print $1}'`
   sname=`echo $line | awk '{print $2}'`
   length=`echo $line | awk '{print $4}'`
   fname=`echo $line | awk '{name=$5;for(i=6;i<=NF;i++){name=sprintf("%s %s",name,$i)};print name}'`
   echo "=> Best matching protein from NCBI HomoloGene is [human] $sname ${length}a.a with refseq ID = $NP"
  fi #output
 fi #nfound
  echo " Its full name is: $fname"
  echo " Its name is: $sname"
fi

if [ "$temp" == "" ] ; then
 echo "FATAL error: temp files are NOT defined: all files in folder could be erased!!! Rewrite $0 script";exit
fi
rm -f $temp* $temp2* $temp3* $temp4* $temp5* $temp6* ; exit  #Do NOT use rm -rf will may delete subfolders
