#!/bin/sh
#Save all scripts to ~/database/pipeline_script   Script template is ./template 

dotime=1;starts=`date +%s` ; starttime=`date`

thisfile=$0
doout=0
debug=0

head=1
fill0='min'  #filling value for missing pairs of different rank when -map
fill1='max'  #filling value for missing pairs of same rank when -map
fillpad=$fill0;dopad=0 #filling for edge-padding, so that no cut of edge display. NOT working yet!
symmetric=1  #force to make symtric data for -map
mapfile2=0

oldline=$*   #all argvs
oldline1=`awk -v ins="$oldline" 'BEGIN{n=split(ins,a," ");for(i=1;i<n;i++){printf("%s ",a[i])}}'` #remove last argv
if [ -n "$1" ] ; then
 aaa=`echo "$1" | awk '{print substr($1,1,1);exit}'`  #check if first input is -XXX
 while [ "$aaa" == "-" ] ; do
  case $1 in
   -debug) debug=1; shift;;
   -out) output="$2"; doout=1;shift 2;;  #Use "$2" to pass argments with blank space inside as d='a b c''
   -pad)dopad=1;shift;;
   -nopad)dopad=0;shift;;
   -fillpad)dopad=1;fillpad=$2;shift 2;;
   -fill0)fill0=$2;shift 2;;
   -fill1)fill1=$2;shift 2;;
   -nosym)symmetric=0;shift;;
   -nohead)head=0;shift;;
   -mapfile2)mapfile2=1;shift;;
   *) $0; echo "***Fatal error @ $0! Argument $1 is unrecoginized and ignored : $0 $oldline!" 1>&2 ; exit;;
  esac
  [ -n "$1" ] && aaa=`echo "$1" | awk '{print substr($1,1,1)}'` || aaa='NA'
 done
fi
[ $debug -eq 1 ] && echo $0 $oldline

if [ -n "$1" ] ; then 
 input="$1"
 if [ -n "$2" ] ; then
  output=$2; doout=1
 fi
else
cat << ttt
    ****NOTE: Copyright belongs to Dr. Hongzhi Li *******

 Add pad to mapfile (matrix) or -mapfile2 for ./sdf_contactmap
 Add two rows of pad data as padding. So display will have padding and no edge cut. Working but ugly. dosrt=2 added after sort
 Only works on mapfile, NOT mapfile2 in ./sdf_contactmap!
 Remember: 
  nsdf=`expr $nsdf + 2`  #Must increase nsdf by 2 here for heatmap plot
  if [ $dorange -eq 1 ] ; then #padding will not work as edge 0/(max+1) is gone
   xstart=`expr $xstart + 1`
   xend=`expr $xend + 1`  #Increase range by two
  fi

 Usage: $0 [Options] Input
 Options:
  -debug : debug model on
  -out Output : User defined output
  -mapfile2 : input is mapfile2 [default is mapfile]
     Seems the code for mapfile and mapfile2 can be identical
 Example: 
  $0 mapfile 
  $0 -mapfile2 mapfile2
ttt
  exit
fi

extension=`echo $input | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
infile=`echo $input | awk '{l=length($1)-3;a=substr($1,l,4);if(a==".pdb"){print substr($1,1,l-1)}else{print $1}}'`
infile=`echo $input | awk '{n=split($1,a,".");printf("%s",a[1]);for(i=2;i<n;i++){printf(".%s",a[i])}}'`
#infile=`basename $input ${extension}`
[ $doout -ne 1 ] && output=$infile'_.xls'

#FATAL WARNing: NEVER delete following temp files! Otherwise last line will erase all files * in folder
# Not recommend to define temp=$0'_'$$'.tmp'  as temp has ./ ahead which may cause trouble when re-use it to define temp file name
temp=$$'.tmp';  temp2=$temp'2' ; temp3=$temp'3' ; temp4=$temp'4'; temp5=$temp'5'; temp6=$temp'6'

#Check root folder: scalemp1=p-gpu1; p-ngs=hpc
ed='/home/holi/database/pipeline_script/'
drd='/home/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My old computer
drd='/isi-dcnl/flower_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-ngs2
drd='/isi-flower/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-gpu1
drd='/net/isi-dcnl/ifs/user_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd ##holi@hpc-access1.coh.org
drd='/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@scalemp1
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My newest computer
thisfolder=`pwd`; thisfolder=$thisfolder'/'
if [ $thisfolder != $ed ] ; then
 cp -f $ed/back $ed/get $ed/symbol.txt .
fi

if [ $mapfile2 -eq 0 ] ; then
 awk 'BEGIN{head='$head';n=0;max=0;fill0s="'$fill0'";fill1s="'$fill1'";fillpads="'$fillpad'";symmetric='$symmetric'
  small=999999;big=-999999
 }{
 if(NR>head){
  n++
  a1[n]=$1;a2[n]=$2;a3[n]=$3;a4[n]=$4;a5[n]=$5;use[n]=0
  if($1>max){max=$1}
  if($2>max){max=$2}
  name[$1]=$4;name[$2]=$5
  if($3>big){big=$3}
  if($3<small){small=$3}
 } else{
  print $_
 }
}END{
 fillpad='$fillpad';fill0='$fill0';fill1='$fill1'
 if(fillpads=="max"){fillpad=big}
 if(fillpads=="min"){fillpad=small}
 if(fill1s=="max"){fill1=big}
 if(fill1s=="min"){fill1=small}
 if(fill0s=="max"){fill0=big}
 if(fill0s=="min"){fill0=small}

 for (i=0;i<=(max+1);i++){  #Add one row to max+1 for padding and one row to 0
  for (j=0;j<=(max+1);j++){ #Add one row to max+1 for padding and one row to 0
   did=0
   for(k=1;k<=n;k++){
    if(use[k]<2){  #One pair only count twice as Rank1-Rank2 and Rank2-Rank1
     if(a2[k]==i&&a1[k]==j){
     did=1;use[k]++
     print j+1,i+1,a3[k],a4[k],a5[k] #Must increase rank by 1 as plot cannot start from 0
     break
     }
     if(a1[k]==i&&a2[k]==j&&symmetric==1){  #Assign Rank1-Rank2 value = Rank2-Rank1 value 
     did=1;use[k]++
     print j+1,i+1,a3[k],a5[k],a4[k]  #increase rank by 1
     break
     }
    }
   }
   if(did==0){
    score=fill0
    if(i==j){score=fill1}
    if(name[i]==""){name[i]="."}
    if(name[j]==""){name[j]="."}
    if(i==0||i==(max+1)){score=fillpad;name[i]="."}  #cannot use empty name, will display wrong
    if(j==0||j==(max+1)){score=fillpad;name[j]="."}  #cannot use empty name, will display wrong   
    print j+1,i+1,score,name[j],name[i] #increase rank by 1
   }
  }
 }
}' $input >  $output

else  #for mapfile2

 awk 'BEGIN{head='$head';n=0;max=0;fill0s="'$fill0'";fill1s="'$fill1'";fillpads="'$fillpad'";symmetric='$symmetric'
  small=999999;big=-999999
 }{
 if(NR>head){
  n++
  a1[n]=$1;a2[n]=$2;a3[n]=$3;a4[n]=$4;a5[n]=$5;use[n]=0
  if($1>max){max=$1}
  if($2>max){max=$2}
  name[$1]=$4;name[$2]=$5
  if($3>big){big=$3}
  if($3<small){small=$3}
 } else{
  print $_
 }
}END{
 fillpad='$fillpad';fill0='$fill0';fill1='$fill1'
 if(fillpads=="max"){fillpad=big}
 if(fillpads=="min"){fillpad=small}
 if(fill1s=="max"){fill1=big}
 if(fill1s=="min"){fill1=small}
 if(fill0s=="max"){fill0=big}
 if(fill0s=="min"){fill0=small}

 for (i=0;i<=(max+1);i++){  #Add one row to max+1 for padding and one row to 0
  for (j=0;j<=(max+1);j++){ #Add one row to max+1 for padding and one row to 0
   did=0
   for(k=1;k<=n;k++){
    if(use[k]<2){  #One pair only count twice as Rank1-Rank2 and Rank2-Rank1
     if(a2[k]==i&&a1[k]==j){
     did=1;use[k]++
     print j+1,i+1,a3[k],a4[k],a5[k] #Must increase rank by 1 as plot cannot start from 0
     break
     }
     if(a1[k]==i&&a2[k]==j&&symmetric==1){  #Assign Rank1-Rank2 value = Rank2-Rank1 value 
     did=1;use[k]++
     print j+1,i+1,a3[k],a5[k],a4[k]  #increase rank by 1
     break
     }
    }
   }
   if(did==0){
    score=fill0
    if(i==j){score=fill1}
    if(name[i]==""){name[i]="."}
    if(name[j]==""){name[j]="."}
    if(i==0||i==(max+1)){score=fillpad;name[i]="."}  #cannot use empty name, will display wrong
    if(j==0||j==(max+1)){score=fillpad;name[j]="."}  #cannot use empty name, will display wrong   
    print j+1,i+1,score,name[j],name[i] #increase rank by 1
   }
  }
 }
}' $input >  $output


fi

if [ "$temp" == "" ] ; then
 echo "FATAL error: temp files are NOT defined: all files in folder could be erased!!! Rewrite $0 script";exit
fi
rm -f $temp* $temp2* $temp3* $temp4* $temp5* $temp6* ; exit  #Do NOT use rm -rf will may delete subfolders
