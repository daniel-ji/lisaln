#!/bin/sh
#Save all scripts to ~/database/pipeline_script   Script template is ./template 

dotime=1;starts=`date +%s` ; starttime=`date`

thisfile=$0
doout=0
debug=0
cname=0;display=1;head=1;shortname=0
alnonly=0
num=900
dosort=1
mapfile='species_mapping.txt'  #mapping file for species names. Do NOT add folder prefix
nonelist=3  #priority level for none-listed species in species_mapping.txt

oldline=$*   #all argvs
oldline1=`awk -v ins="$oldline" 'BEGIN{n=split(ins,a," ");for(i=1;i<n;i++){printf("%s ",a[i])}}'` #remove last argv
if [ -n "$1" ] ; then
 aaa=`echo "$1" | awk '{print substr($1,1,1);exit}'`  #check if first input is -XXX
 while [ "$aaa" == "-" ] ; do
  case $1 in
   -priority)nonelist=$2;shift 2;;
   -nosort)dosort=0;shift;;
   -num)num=$2;shift 2;;
   -alnonly)alnonly=1;shift;;
   -debug) debug=1; shift;;
   -out) output="$2"; doout=1;shift 2;;  #Use "$2" to pass argments with blank space inside as d='a b c''
   -change)cname=1;shortname=1;shift;;
   -short)shortname=1;shift;;
   -display)display=1;shift;;
   -nodisplay)display=0;shift;;
   -nohead)head=0;shift;;
   *) $0; echo "***Fatal error @ $0! Argument $1 is unrecoginized and ignored : $0 $oldline!" 1>&2 ; exit;;
  esac
  [ -n "$1" ] && aaa=`echo "$1" | awk '{print substr($1,1,1)}'` || aaa='NA'
 done
fi
[ $debug -eq 1 ] && echo $0 $oldline

if [ -n "$1" ] ; then 
 input="$1"
 fasta2=$2
else
cat << ttt
    ****NOTE: Copyright belongs to Dr. Hongzhi Li 2019/8/8*******

 Merge two fastas into a total number of $num for species :
  Use all first fasta, add new species from 2nd fasta if any
  Each species will have only one fasta
  Will also sort fasta by the order species in  species_mapping.txt
 If only one input fasta, will sort it by species_mapping.txt

 Convert blastp output into friendly format: NP|StartResd|End(firstPiece)|Identity|Percent|Species|Name
  But when there are more than 100 for Sequences producing significant alignments,
   will use Sequences producing significant alignments for output as (unless -alnonly):
     NP|NA|9999|9999*IdentityPercent|Percent|Species(may only partial)|Name

 Blastp output can be from ./NCBI_blast, or manually save text format from balstp website
 Example can be ARI1/ARI1A.fasta_blastp_refseq_protein.txt

Sequences producing significant alignments:
XP_016862233.1 protein polybromo-1 isoform X13 [Homo sapiens]      3509       0.0     100%
XP_016862230.1 protein polybromo-1 isoform X11 [Homo sapiens]      3509       0.0     100%

ALIGNMENTS
>NP_006006.3 AT-rich interactive domain-containing protein 1A isoform a [Homo
sapiens]
Length=2285

 Score = 4586 bits (11894),  Expect = 0.0, Method: Compositional matrix adjust.
 Identities = 2285/2285 (100%), Positives = 2285/2285 (100%), Gaps = 0/2285 (0%)

Query  1     MAAQVAPAAASSLGNPPPPPPSELKKAEQQQREEAGGEAAAAAAAERGEMKAAAGQESEG  60
             MAAQVAPAAASSLGNPPPPPPSELKKAEQQQREEAGGEAAAAAAAERGEMKAAAGQESEG
Sbjct  1     MAAQVAPAAASSLGNPPPPPPSELKKAEQQQREEAGGEAAAAAAAERGEMKAAAGQESEG  60



 Usage: $0 [Options] Input
 Options:
  -debug : debug model on
  -out Output : User defined output merged fasta
  x-short : change name to shorter ones as abbreaviation as H.sapien M.M.cress
  x-change : change some species name to easy reading human, mouse, etc. Otherwise, shrink it as: H.sapien
  -priority Number: priority level to add for none-listed species in species_mapping.txt [$nonelist]
  -nosort : Will NOT sort fasta by the order species in species_mapping.txt
    NOTE: The name mapping is in species_mapping.txt

 Example: 
  $0 -num 200 PBRM1_blastp_landmark.fasta.txt PBRM1_homoloGene.fasta.txt
    #Add fastas of new species from HomoloGene DB to Landmark DB
    # also sort fasta by the order species in  species_mapping.txt
  $0 PBRM1_blastp_landmark.fasta.txt
    #Only one input fasta, will sort it by species_mapping.txt

 NOTE: called by ./NCBI_blast
ttt
  exit
fi

extension=`echo $input | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
infile=`echo $input | awk '{l=length($1)-3;a=substr($1,l,4);if(a==".pdb"){print substr($1,1,l-1)}else{print $1}}'`
infile=`echo $input | awk '{n=split($1,a,".");printf("%s",a[1]);for(i=2;i<n;i++){printf(".%s",a[i])}}'`
#infile=`basename $input ${extension}`
[ $doout -ne 1 ] && output=$infile'_merge.fasta.txt'

#FATAL WARNing: NEVER delete following temp files! Otherwise last line will erase all files * in folder
# Not recommend to define temp=$0'_'$$'.tmp'  as temp has ./ ahead which may cause trouble when re-use it to define temp file name
temp=$$'.tmp';  temp2=$temp'2' ; temp3=$temp'3' ; temp4=$temp'4'; temp5=$temp'5'; temp6=$temp'6'

#Check root folder: scalemp1=p-gpu1; p-ngs=hpc
ed='/home/holi/database/pipeline_script/'
drd='/home/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My old computer
drd='/isi-dcnl/flower_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-ngs2
drd='/isi-flower/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-gpu1
drd='/net/isi-dcnl/ifs/user_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd ##holi@hpc-access1.coh.org
drd='/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@scalemp1
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My newest computer
thisfolder=`pwd`; thisfolder=$thisfolder'/'
if [ $thisfolder != $ed ] ; then
 cp -f $ed/lists_compare_different $ed/fasta_counts $ed/$mapfile .
fi

domerg=1;nadd=0

if [ ! -s $input ] ; then
 echo "Fatal error! No first fasta $input found @$0"
 exit
fi

if [ "$fasta2" == "" ] || [ ! -s $fasta2 ] ; then
 echo " No 2nd fasta $fasta2 exists, will not merge. Only sort input fasta by $mapfile Output is $output"
 domerg=0
 fasta2='NA'
fi 

nf=`./fasta_counts $input | tail -1 | awk '{print $NF}'`
if [ $nf -ge $num ] ; then
 echo " First fasta $input has $nf (>=$num) entries, will not merge. Output is $output"
 domerg=0
fi

grep '>' $input | awk '{if (substr($1,1,1)==">"){np=substr($1,2,99);nf=split($_,d,"[");split(d[nf],v,"]");spe=v[1];print np,spe}}' > $temp
#[ -s $fasta2 ] && grep '>' $fasta2 | awk '{if (substr($1,1,1)==">"){np=substr($1,2,99);nf=split($_,d,"[");split(d[nf],v,"]");spe=v[1];print np,spe}}' > $temp2

if [ -s $fasta2 ] ; then
 grep '>' $fasta2 | awk '{if (substr($1,1,1)==">"){np=substr($1,2,99);nf=split($_,d,"[");split(d[nf],v,"]");spe=v[1];print np,spe}}' > $temp2 
 ./lists_compare_different -out $temp.diff -col1 2 -col2 2 $temp $temp2 > $temp6
 ndiff=`grep 'Number of different compounds = ' $temp6 | tail -1 | awk '{print $6}'`
 if [ $ndiff -ge $num ] ; then
  echo " 2nd fasta $fasta2 has no new species entries, will not merge. Output is $output"
  domerg=0
 fi
fi

############################### Merge for new species
if [ $domerg -eq 1 ] ; then
#add species priority:
cat $temp.diff | awk 'BEGIN{cname='$cname';shortname='$shortname';nft=0;nonelist='$nonelist'
  file="'$mapfile'";  n=0
  while ((getline line < file) > 0) {
   if (substr(line,1,1)!="#"){
    n++; nf=split(line,d,"\t"); a[n]=d[1];b[n]=tolower(d[2]);c[n]=d[3]
   }
  }
  close(file)
 }{did=0
  st=length($1)+2;spe=tolower(substr($_,st,99))
  for(i=1;i<=n;i++){
   if(spe==b[i]){printf("%s\t%s\t%s\n",c[i],$1,spe);did=1;break}
  }
  if(did==0){printf("%s\t%s\t%s\n",nonelist,$1,spe)}
 }' | sort -n -k 1 > $temp.diff2 

echo " Number of new species in 2nd fasta = $ndiff (none-listed species with priority level=$nonelist)"
cat $temp.diff2
#1	NP_990496.1	gallus gallus
#2	XP_005223037.1	bos taurus

naddmore=`echo $num $nf | awk '{print $1-$2}'`
cat $temp.diff2 | head -$naddmore > $temp.diff3
nadd=`wc -l $temp.diff3 | awk '{print $1}'`

cp $input $output
awk 'BEGIN{
  file="'$temp.diff3'";  n=0;s=0
  while ((getline line < file) > 0) {
   if (substr(line,1,1)!="#"){
    n++; nf=split(line,d,"\t"); a[n]=d[1];b[n]=d[2];c[n]=d[3]
   }
  }
  close(file)
}{
 if(substr($1,1,1)==">"){
  np=substr($1,2,99);did=0
  for(i=1;i<=n;i++){
   if(np==b[i]){did=1;break}
  }
 }
 if(did==1){print $_}
}' $fasta2 >> $output

else #domerg
 cp $input $output
 #echo lalalala $input $output
fi #domerg

#sort fasta by the order species in species_mapping.txt
if [ $dosort -eq 1 ] ; then
 cp $output $temp
 cat $temp | awk 'BEGIN{cname='$cname';shortname='$shortname';nft=0;nonelist='$nonelist'
  file="'$mapfile'";  n=0;m=0;no=0
  while ((getline line < file) > 0) {
   if (substr(line,1,1)!="#"){
    n++; nf=split(line,d,"\t"); a[n]=d[1];b[n]=tolower(d[2]);c[n]=d[3]
   }
  }
  close(file)
 }{
  if(substr($1,1,1)==">"){ 
   #np=substr($1,2,99);
   nf=split($_,d,"[");split(d[nf],v,"]");spe=tolower(v[1])
   did=0;m++
   for(i=1;i<=n;i++){
    if(spe==b[i]){did=1;rank[m]=i;break}
   }
   if(did==0){no++;rank[m]=n+no}
   fasta[m]=sprintf("%s\n",$_)
  }else{
   fasta[m]=sprintf("%s%s\n",fasta[m],$_)
  }
 }END{
  for(i=1;i<=(n+no);i++){
   for(j=1;j<=m;j++){
    if(rank[j]==i){
     printf("%s",fasta[j])
    }
   }
  }
 }' > $output
 echo " Sorted fasta by species order defined in $mapfile. None-listed species put at end"
fi

nfin=`./fasta_counts $output | tail -1 | awk '{print $NF}'`
echo "=> Final $nfin ($nf+$nadd) none-empty merged fasta is $output"

if [ "$temp" == "" ] ; then
 echo "FATAL error: temp files are NOT defined: all files in folder could be erased!!! Rewrite $0 script";exit
fi
rm -f $temp* $temp2* $temp3* $temp4* $temp5* $temp6* ; exit  #Do NOT use rm -rf will may delete subfolders
