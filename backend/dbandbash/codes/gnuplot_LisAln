#!/bin/sh
#Save all scripts to ~/database/pipeline_script
# Script template is ./template 

dotime=1;starts=`date +%s` ; starttime=`date`

exe='/home/holi/bin/gnuplot'  #gnuplot exec
[ ! -s $exe ] && exe='/usr/local/bin/gnuplot'
[ ! -s $exe ] && exe='/usr/bin/gnuplot'
[ ! -s $exe ] && exe='gnuplot'


thisfile=$0
doout=0
debug=0
display=1
autoxy=0;nochangexy=0
autonumber=70
addrank=1
dosort=1  #=0: no sort  =1: sort by cluster rank  =2: sort by cluster size
filetype=0  #0: Cluster File  1:Distance/Similarity Matrix file  2:SDF file  3. None-complete or none-ordered Maxtrix/map file 4.Half-matrix
 mapnum=2 #=2:SDF file and use mapfile2 =1: SDF and use mapfile as matrix
fill0='min'  #filling value for missing pairs of different rank when -map
fill1='max'  #filling value for missing pairs of same rank when -map
doVCN=1
distop=5

autoc=1; cstep=10  #=1:auto determine cluster steps from max (startc) to min (endc) at cstep cluster
startc=0.8;endc=0;stepc=-0.1;dostepc=1;list='NA'  #cluster steps
start=0;end=0
nocontactmap=0
ismf=1
smaller=0
xlabel='';ylabel='';extraline=''
docout=0
maxlength=20  #max length of name to display
digit=2 #label how many digitals. =0: No decimal 1/2: 1 or 2 decimals
cutshow=0.6;docutshow=0
noplot=0
less=0

fontsize=15
dofontsize_tics=0;fontsize_tics=18   #font size for tics
plotwidth=921 #90% w /80% h of  1024x768 is regular full screen size for computer. Best for ppt to insert since there is Title in ppt
plotheight=615
widthbase=350   #Increase this for long data name. Decrease for shorter cmpd name
#plotsize='size 921,615'  #90% w /80% h of  1024x768 is regular full screen size for computer. Best for ppt to insert since there is Title in ppt
linelength=60  #length of each line when -auto. Use 60pts for orient='y' and 40pts for orient='x'
term='gif enhanced'  #output style as .png file. 'enhanced' can produce sub and superscripts
dotitle=0;title=''; 
doxlabel=0;doylabel=0;dozlabel=0;
keyposition='off'
title=''
head=1
orient='x'  #=y: put data along y-axis
linetype=1
linewidth=2
linecolor=1
nox=1
offset=0;maxoff=0.5;offgroup=5   #=1: lines are offset: maxoff: max offset ratio of each line. e.g. at most offset 50%: 
       #A group of $offgroup compounds will goes to maxoff
unicolor=0

workstation='holi@br11159.coh.org'  #My workstation to run this script
workstationdir='/home/holi/'
runlocal=1  #force to run in local machine. Otherwise, script need modification

fontsize_tics=18 #do not change this value
font='/usr/share/fonts/liberation/LiberationMono-Bold.ttf'  #this is identical width font to display seq aln
#[ ! -d /usr/share/fonts/msttcorefonts ] && font='VeraBd'  #In case no arial font, use VeraBd
#[ ! -d /usr/share/fonts/bitstream-vera ] && font='/usr/share/fonts/dejavu/DejaVuSans.ttf' #otherwise, use DejaVuSans-Bold.ttf
black=0
left=0  #put residnum on left side
xscale=0.8  #do not change this value
yscale=0.8
keepnum=1
angle=0

oldline=$*   #all argvs
#echo $0 $oldline
if [ -n "$1" ] ; then
 aaa=`echo "$1" | awk '{print substr($1,1,1)}'`  #check if first input is -XXX
 while [ $aaa == "-" ] ; do
  case $1 in
   -rotate)angle=$2;shift 2;;
   -black)black=1;shift;;   
   -b)black=1;shift;;
   -right)left=0;shift;;
   -left)left=1;shift;;
   -xs)xscale=$2;shift 2;;
   -ys)yscale=$2;shift 2;;
   -keepnum)keepnum=1;shift;;
   -nonum)keepnum=0;shift;;
   -out) output="$2"; doout=1;shift 2;;

   -noVCN)doVCN=0;shift;;
   -smaller)smaller=1;shift;;
   -larger)smaller=0;shift;;
   -debug) debug=1; shift;;
   -clusterout)mclusterfile=$2;docout=1;shift 2;;
   -x)orient='x';nochangexy=1;shift;;
   -y)orient='y';nochangexy=1;shift;;
   -auto)autoxy=1;shift;;
   -linetype)linetype=$2;shift 2;;
   -linewidth)linewidth=$2;shift 2;;
   -linecolor)linecolor=$2;shift 2;;
   -linelength)linelength=$2;shift 2;;
   -title)title="$2";shift 2;;
   -w)plotwidth=$2;shift 2;;
   -h)plotheight=$2;shift 2;;
   -widthbase)widthbase=$2;shift 2;;
   -fontsize_tics)fontsize_tics=$2;dofontsize_tics=1;shift 2;;
   -head)head=$2;shift 2;;
   -showaxis)nox=0;shift;;   
   -noshowaxis)nox=1;shift;;
   -offset)offset=1;shift;;
   -maxoff)maxoff=$2;shift 2;;
   -offgroup)offgroup=$2;shift 2;;   
   -nooffset)offset=0;shift;;
   -rank)addrank=1;shift;;
   -norank)addrank=0;shift;;
   -sortbyrank)dosort=1;addrank=1;shift;;
   -sortbysize)dosort=2;addrank=1;shift;;
   -nosort)dosort=0;shift;;
   -matrix)filetype=1;shift;;
   -halfmatrix)filetype=4;shift;;
   -map)filetype=3;shift;;
   -cluster)filetype=0;shift;;
   -sdf)filetype=2;shift;;
   -mapnum)mapnum=$2;shift 2;;
   -clusterstep)autoc=0;startc=$2;endc=$3;stepc=$4;shift 4;;
   -autoc)autoc=1;shift;;
   -cstep)autoc=1;cstep=$2;shift 2;;
   -unicolor)unicolor=1;shift;;
   -list)autoc=0;dostepc=0;list="$2";shift 2;;
   -top)start=1;end=$2;shift 2;;
   -range)start=$2;end=$3;shift 3;;
   -nocontactmap)nocontactmap=1;cdisplay='-nognu';shift;;   
   -xlabel)xlabel='set xlabel"'"$2"'"';shift 2;;
   -ylabel)ylabel='set ylabel"'"$2"'"';shift 2;;
   -extra)extraline=$extraline' '"$2"';';shift 2;;
   -fill0)fill0=$2;shift 2;;
   -fill1)fill1=$2;shift 2;;
   -remote)runlocal=0;shift;;
   -maxlength)maxlength=$2;shift 2;;
   -digit)digit=$2;shift 2;;
   -cutshow)cutshow=$2;docutshow=1;shift 2;;
   -nocutshow)docutshow=0;shift;;
   -distop)distop=$2;shift 2;;
   -noplot)noplot=1;docutshow=1;shift;;
   -less)less=1;shift;;

   *) $0; echo "***Fatal error @ $0! Argument $1 is unrecoginized and ignored : $0 $oldline!" 1>&2 ; exit;;
  esac
  [ -n "$1" ] && aaa=`echo "$1" | awk '{print substr($1,1,1)}'` || aaa='NA'
 done
fi

if [ -n "$1" ] ; then
 input="$1"
 [ -n "$2" ] && output=$2
 [ -n "$2" ] && doout=1
else
cat << ttt
    ****NOTE: Copyright belongs to Dr. Hongzhi Li *******

 Use gnuplot to draw sequence alignment file from Clustal or LisAln from ./NCBI_blast 2019/8
  Different residues color differently
  Output two header lines:  (... for empty aa)
  1        10        20 23
  |---:-...---+----:----+--|   

 1. LisAln input:   ./NCBI_blast -li MAPK12
Human            MSSPPPARSGFYRQEVTKTAWEVRAVYRDLQPVGSGAYGAVCSAVDGRTGAKVAIKKLYR  60
Rat              -MSDSKSDGQFYSVQVADSTFTVLKRYQQLKPIGSGAQGIVCAAFDTVLGINVAVKKLSR  59
Mouse            MSSPPPARKGFYRQEVTKTAWEVRAVYQDLQPVGSGAYGAVCSAVDSRTGNKVAIKKLYR  60
Consensus          *       *            

 2. Clustal website input from ./clustal_seq_align :
CLUSTAL O(1.2.4) multiple sequence alignment


NP_002960.2      MSSPPPARSGFYRQEVTKTAWEVRAVYRDLQPVGSGAYGAVCSAVDGRTGAKVAIKKLYR   60
NP_002745.1      --MSLIRKKGFYKQDVNKTAWELPKTYVSPTHVGSGAYGSVCSAIDKRSGEKVAIKKLSR   58
NP_001306.1      ---MSQERPTFYRQELNKTIWEVPERYQNLSPVGSGAYGSVCAAFDTKTGLRVAVKKLSR   57
NP_002742.3      ---MSGPRAGFYRQELNKTVWEVPQRLQGLRPVGSGAYGSVCSAYDARLRQKVAVKKLSR   57
NP_620707.1      -MSDSKCDSQFYSVQVADSTFTVLKRYQQLKPIGSGAQGIVCAAFDTVLGINVAVKKLSR   59
NP_620637.1      -MSRSKRDNNFYSVEIGDSTFTVLKRYQNLKPIGSGAQGIVCAAYDAILERNVAIKKLSR   59
                           **  :: .: : :         :**** * **:* *     .**:*** *

How to setup gnuplot font?
1. Found fonts in local machine: ls /usr/share/fonts/
 e.g. I have /usr/share/fonts/bitstream-vera/VeraBd.ttf
 To see its look like: display /usr/share/fonts/liberation/LiberationMono-Bold.ttf
 If gnuplot was built with support for TrueType (.ttf) or Adobe Type 1 (.pfa) fonts, they may be selected using the 'font {}' option. 
 is either the full pathname to the font file, or a font face name that is assumed to be the first part of a filename in one of the directories 
 listed in the GDFONTPATH environmental variable. That is, 'set term png font "Face"' will look for a font file named either /Face.ttf or /Face.pfa.
 Both TrueType and Adobe Type 1 fonts are fully scalable and may be rotated through any angle
2. Define environment variables $GDFONTPATH and $GNUPLOT_DEFAULT_GDFONT
 e.g. Add them to .bashrc as:
export GDFONTPATH='/usr/share/fonts/bitstream-vera'
export GDFONTPATH=$GDFONTPATH':/usr/share/fonts/msttcorefonts'  (Window Fonts as "Arial")
export GNUPLOT_DEFAULT_GDFONT=VeraBd
3. source .bashrc


 gnuplot to draw horizental line:
   plot [1:10] 5 w lines lt 2 lc 3 lw 3  #line at y=5, from xrange 1-10
 Verticle line: http://stackoverflow.com/questions/4499998/gnuplot-vertical-lines-at-specific-positions/8562193#8562193
   set arrow from $x1,$y1 to $x1,$y2 nohead lw 4 lt 2 lc rgb 'red'   #Use absolute coords
   set arrow from 0.35,graph(0,0) to 0.35,graph(1,1) nohead   #Use relative y-range as full length of y-axis at x=0.35 
   set arrow from 0.35,ymin to 0.35,ymax nohead

 set style arrow {idx:index} [ nohead | head | backhead | heads ] 
                            [ size {flt:length} [,{flt:angle}]  [,{flt:backangle}] ] 
                            [ filled | empty | nofilled ] [ front | back ] 
                            [ [ linetype | lt {idx:type} ] [ linewidth | lw {int:width} ] | [ linestyle | ls {idx:style} ] ] 

 set label {<tag>} {"<label text>"} {at <position>}
               {left | center | right}
               {norotate | rotate {by <degrees>}}
               {font "<name>{,<size>}"}
               {noenhanced}
               {front | back}
               {textcolor <colorspec>}
               {point <pointstyle> | nopoint}
               {offset <offset>}
     unset label {<tag>}
     show label

 Usage: $0 [Options] InfileFile(seq aln file from Clustal)
   This will auto-replace empty space or _ in name to - for better display 
 Options:
  -b|-black : white/black draw (use less space and no worry to adjust spaces)
  -left|[-right] : put residue number in first header to left-side [default: to right]
  -xs|-ys : scale factor to adjust seq space for color plot [$xscale|$yscale]
  -nonum : residue number on right-most will be hidden
    [-keepnum]: keep residue number in 2nd header to right-most for all proteins, so as to measure other proteins
 
Example:
  $0 lipid_ortho.aln.txt
   #color residues. Shrink residue name space to 95%. Tested in p38/
  $0 -xs 0.8 -ys 1.2 -nonum -left mapk12_blastp_landmark_alnh.txt
   #adjust residue name spaces.
  $0 -black mapk12_blastp_landmark_alnh.txt
   #black-white plot

  WARNing: Need check special font for seq residue names (same width for all letters)
  NOTE: called by ./seq_align_check 
ttt
  exit
fi

[ "$list" == 'NA' ] && dostepc=1
[ ! -s $exe ] && exe='/usr/local/bin/gnuplot'
[ ! -s $exe ] && exe='/usr/bin/gnuplot'
[ ! -s $exe ] && exe='gnuplot'

infile=`echo $input | awk '{l=length($1)-3;a=substr($1,l,4);if(a==".txt"){print substr($1,1,l-1)}else{print $1}}'`
inputo=$input

temp=$0'_'$$'.tmp';  temp2=$temp'2' ; temp3=$temp'3' ; temp4=$temp'4'; temp5=$temp'5'; temp6=$temp'6'

#Check root folder: scalemp1=p-gpu1; p-ngs=hpc
ed='/home/holi/database/pipeline_script/'
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My old computer
drd='/isi-dcnl/flower_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-ngs2
drd='/isi-flower/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-gpu1
drd='/net/isi-dcnl/ifs/user_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd ##holi@hpc-access1.coh.org
drd='/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@scalemp1
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My newest computer

thisfolder=`pwd`; thisfolder=$thisfolder'/'
if [ $thisfolder != $ed ] ; then
 cp -f $ed/back $ed/get $ed/sdf_contactmap .
fi

termo=`echo $term | awk '{print $1}'`
[ $termo == "postscript" ] && termo='.ps'
[ $doout -eq 0 ] && output=$infile'.gif'

#check input and remove headers
awk 'BEGIN{s=0;all=0}{
 if(NR==1){aaa=$_
  if(toupper($1)=="CLUSTAL"){s=1}
 }
 if(NR==2){bbb=$_
  if(NF==0){s=1}
 }
 if(NR==3){
  if(s==0){print aaa;print bbb;print $_;all=1}
  if(s==1&&NF>0){s=0;all=1;print $_}
 }
 if(NR>3){
  if(all==1){print $_}
  if(s==1&&NF>0){s=0;all=1;print $_}
 }
}' $input > $temp.aln
input=$temp.aln

#replace _ to - in protein name to avoid shorter display that cannot align
awk '{if(index($1,"_")==0){print $_}else{
  for(i=1;i<=length($_);i++){a=substr($_,i,1);if(a=="_"){printf("-")}else{printf("%s",a)}};printf("\n")
 }}' $input > $temp.aln2
input=$temp.aln2

ndata=`awk 'BEGIN{max=0}{if(length($_)>max){max=length($_)}}END{print max}' $input`
nlevel=`wc -l $input | awk '{print $1}'`
nblock=`awk 'BEGIN{n=1}{if(NF==0){n++}}END{print n}' $input`

##############################################################################
##################################################### Plot

#Auto expand XY plotsize for large data
[ $ndata -gt $autonumber ] && autoxy=1
if [ $autoxy -eq 1 ] ; then
 if [ $ndata -gt $autonumber ] ; then  #This part is real in work
  [ $nochangexy -eq 0 ] && orient='x'
  dofontsize_tics=1;
  #fontsize_tics=18  #fix font size 18. DO not change it!
  plotwidth=`echo $ndata $fontsize_tics $xscale | awk '{n=$1*$2;print n}'`
  plotheight=`echo $nlevel $fontsize_tics $yscale | awk '{y=int(($1+4)*$2)*2*$3;print y}'` #Each label use 12 pixel tall x1.2

  yyy=$ylabel;ylabel=$xlabel;xlabel=$yyy
  #offset=0   #0 offset to avoid negative plot
 else
  [ $nochangexy -eq 0 ] && orient='x'
  linelength=40 #reduce line length to 40pts
  plotheight=`echo $nlevel $plotheight $linelength $widthbase | awk '{n=$1*$3+$4;if(n>$2){n=$2};print n}'`
  plotwidth=`echo $ndata $fontsize_tics $plotwidth | awk '{n=$1*2*$2+80; if(n>$3){n=$3};print n}'` #Each label use 12 pixel tall
 fi
 echo "Auto determine x/y orientation as -$orient since data = $ndata to $autonumber . Resize plot $plotwidth $plotheight"
fi

#auto for offset
offsetv=0
if [ $offset -ne 0 ] ; then
 offsetv=`echo $linelength $ndata | awk '{n=$1/$2;print n}'`  #offset pixels 
 #echo " Offset of lines: $offsetv pixels"
fi

if [ $dofontsize_tics -eq 0 ] ; then
 [ $orient == 'x' ] && fontsize_tics=`echo $ndata $fontsize_tics | awk '{n='$plotwidth'/$1; if(n<9){n=9};if(n>$2){n=$2};printf("%d",n)}'`
 [ $orient == 'y' ] && fontsize_tics=`echo $ndata $fontsize_tics | awk '{n='$plotheight'/1.2/$1; if(n<8){n=8};if(n>$2){n=$2};printf("%d",n)}'`
 #echo "Fontsize resized to $fontsize_tics for $ndata"
fi

#plot range
min=1;max=$ndata;reverse=''
level=`expr $nlevel + 4`  #adjust here
if [ $orient == "y" ] ; then
 norient='x' ; reverse='reverse nowriteback' 
fi
[ $orient == "x" ] && norient='y'
#Display range
rang1='set '$orient'range ['$min':'$max'] '$reverse   #reverse y-axis
rang2='set '$norient'range [0:'$level']'

#draw seq texts
seq=`
awk 'BEGIN{nlevel='$nlevel';w=10;ww=w;black='$black';left='$left';xs='$xscale';ys='$yscale';keepnum='$keepnum';angle='$angle'
  xshift=5 ; shift=nlevel-1 #x/y starting coords
  nblock=0;blockstart=0;nline=0;blockline=0
 }
{
 if(NR==1||(blockstart==1&&NF>1)){  #First draw a line of |-----+----------+-----| 
  blockstart=0
  n=$NF  #last or 3rd col must be residue number
  st=index($_,$2);len=length($2);nlin=int(n/len); ed=st+length($2)-1
  line=""; flin=""
  for(i=1;i<st;i++){line=sprintf("%s ",line)}
  v=split($2,a,"");nsp=0;for(i=1;i<=v;i++){if(a[i]=="-"){nsp++}}  #count how many empty - in first line 
  m=1;first=n-len+1;
  realfirst=first+nsp; if(len==nsp){realfirst=n} #residue number of first aa: special case is all -
  num=realfirst; numnext=num+10; numnextfirst=numnext
  if(left==0){el=st}else{el=st-length(numnext)+1} 
   for(i=1;i<(el);i++){flin=sprintf("%s ",flin)}
  flin=sprintf("%s%s",flin,realfirst);del=length(realfirst);   #First header: label residue number
   if((realfirst % 10)>2){delnext=1}else{delnext=0}  #do not show next +10 residue number 
  line=sprintf("%s|",line)  #2nd header: for +---:--+

  for(i=2;i<len;i++){
   if(a[i]=="-"){hassp=1}else{hassp=0}
   m++;num=num+1-hassp;numnext=num+10   
   if((num % 10)==0){
    if(hassp==0){
     line=sprintf("%s+",line)
    }else{
     line=sprintf("%s.",line)
    }
    if(hassp==0){
     if(delnext<1){flin=sprintf("%s%s",flin,num)}
     delnext--
     if(left==0){del=length(num)}else{del=length(numnext)}
    } else {
     flin=sprintf("%s ",flin)
    }
   }else{
    if(hassp==0){
     if((num % 5)==0){  #every 5 shows :
      line=sprintf("%s:",line)
     } else {
      line=sprintf("%s-",line)
     }
     del--
     if(del<1){flin=sprintf("%s ",flin)}
    }else{
     line=sprintf("%s.",line)
     flin=sprintf("%s ",flin)
    }
   }
  }
  line=sprintf("%s|",line)  #last residue
  flin=sprintf("%s%s",flin,n) #last residue

  #Print first two head bars:  
  if(black==1){
   w++;yshift=shift+3.5-blockline-nblock*2   
   printf("set label %s \"%s\" at %s, %s, 0 \n",w,flin,xshift,yshift)  #firstline of residue labeling
   w++;yshift=shift+2.5-blockline-nblock*2
   printf("set label %s \"%s\" at %s, %s, 0 \n",w,line,xshift,yshift)  #2nd line of +----+ drawing
  }else{
   w++;p=0
   if(left==0){lan=1}else{lan=length(numnextfirst)}
   yshift=shift+(3.5-blockline-nblock*2)*ys
   printf("set label %s \"%s\" at %s, %s, 0 tc ls -1\n",w,substr(flin,1,st-lan),xshift,yshift)
   for(i=(st-lan+1);i<=length(flin);i++){w++;p++;printf("set label %s \"%s\" at %s, %s, 0\n",w,substr(flin,i,1),st-lan+1+(p-1)*xs,yshift)}
   w++;p=0
   yshift=shift+(2.5-blockline-nblock*2)*ys
   printf("set label %s \"%s\" at %s, %s, 0 tc ls -1\n",w,substr(line,1,st-1),xshift,yshift)
   for(i=st;i<=length(line);i++){w++;p++;printf("set label %s \"%s\" at %s, %s, 0\n",w,substr(line,i,1),st+(p-1)*xs,yshift)}
  }
 }

 #Print seq residues:
 if(black==1){ #black plot
  w++;yshift=shift-NR+2-nblock*2
  stop=ed; if(keepnum==1){stop=99999}
  disp=substr($_,1,stop)
  kkk=split($_,www,"\t") #replace \t to space for gnuplot correct display  
  if(kkk>1){disp=www[1];for(j=2;j<=kkk;j++){disp=sprintf("%s %s",disp,www[j])}}  
  printf("set label %s \"%s\" at %s, %s, 0 \n",w,disp,xshift,yshift)  #plot original align, no color-change
 } else { #color plot
  #print protein names:
  w++;yshift=shift-(NR-2+nblock*2)*ys
  printf("set label %s \"%s\" at %s, %s, 0 tc ls -1\n",w,substr($_,1,st-1),xshift,yshift)  #black color=-1
  #print residues:
  p=0;w++
  for(i=st;i<=ed;i++){
   w++;p++;x=substr($_,i,1)
   color=-1 #color tc ls: =-1:black =0:grey =1:red =2:green =3:blue =4:Pink =5:cyan =6:Orange
   if(x=="*"||x=="D"||x=="E"){color=1}  #red for negative
   if(x==":"||x=="K"||x=="R"||x=="H"){color=3}  #blue for positive
   if(x=="."||x=="G"||x=="S"||x=="T"||x=="C"||x=="N"||x=="Q"||x=="Y"){color=2}  #green for hydrophilic
   if(x=="A"||x=="V"||x=="L"||x=="I"||x=="P"||x=="M"||x=="F"||x=="W"){color=5}  #cyan for hydrophobic
   printf("set label %s \"%s\" at %s, %s, 0 tc ls %s\n",w,x,st+(p-1)*xs,yshift,color)
  }
  if(keepnum==1){w++;printf("set label %s \"%s\" at %s, %s, 0 tc ls -1\n",w,substr($_,ed+2,9999),st+(p+1)*xs,yshift)}
 }

 if(NF==0||length($_)<2){blockstart=1;nblock++}
 blockline++
}' $input
`

#############################################################################
#################################### Start for gnuplot code: #############
############################################################################
temp2=`basename $temp2`
cat << eee > $temp
#!$exe

#see http://cs.ecs.baylor.edu/~donahoo/tools/gnuplot/3Dex.html
reset
set terminal $term   size ${plotwidth},${plotheight} font '$font,$fontsize' # 'enhanced' can produce sub and superscripts
set   autoscale                        # scale axes automatically
set title "$title"
set key $keyposition   #legand
#set xtics font '$font,$fontsize_tics'  #smaller font 
#set ytics font '$font,$fontsize_tics'  #smaller font 
set label font '$font,$fontsize_tics'  #smaller font
#set ztics font '$font,$fontsize_tics'  #smaller font 

#set xdata time
#set timefmt "%d/%m/%Y %H:%M:%S"
#set format x "%H:%M"

#set xlabel offset 1,0 ;  #offset ylabel to be more close to y-axis
$xlabel
$ylabel
$rang1
$rang2
$extraline
#$extra

${seq}
$unsetaxis
unset y2tics; 
unset border;   #No x-y axis box and tics
#unset xtics
#unset ytics
#set xtics scale 0  #Remove tics, but keep tics label. Still dots left for tics though
#set ytics scale 0  #Remove tics, but keep tics label. Still dots left for tics though
set xtics textcolor rgb "#ffffff"  #white color to hide xtics, works
set ytics textcolor rgb "#ffffff"  #white color to hide xtics, works
set tics scale 0; #Remove tics, but keep tics label. Still dots left for tics though 
eee
#cat $temp4 >> $temp
#Must draw dummy line to initial arrows ahead
echo "plot -99999 w lines lt 1 lc 1 " >> $temp

#make it executable
chmod +x $temp

#cp $temp j ; chmod +x j ; echo hahaha j
 
#make sure output name has same extension as $termo
output=`echo $output | awk '{p="'$termo'";a=split($1,b,".");if(b[a]==p){print $1}else{
 d=b[1];for(i=2;i<a;i++){d=sprintf("%s.%s",d,b[i])};printf("%s.%s",d,p)}}'`

#Generate plot file
crd=`pwd`
workdir=`echo $crd | sed 's/\/holi//' | sed 's/\/hongzhili//' | sed 's/\/flower_data//' | sed 's/\/isi-flower//' | awk '{print substr($1,2,length($1)-1)}'`
workstationdir=$workstationdir'/'$workdir'/'

#Find IP address:
myIP=`/sbin/ifconfig | grep "inet addr" | awk -F: '{print $2}' | head -1 | awk '{print $1}'`
if [ "$myIP" == "" ] ; then
 myIP=`/sbin/ifconfig | grep "inet " | awk '{print $2}' | head -1 | awk '{print $1}'` #IP address of this machine for new 32-CPU machine
fi
workIP=`echo $workstation | awk '{split($1,a,"@");print a[2]}'`
[ "$myIP" == "$workIP" ] && runlocal=1
if [ $runlocal -eq 1 ] ; then
 #echo "$0 running in local $myIP $workIP " 1>&2
 $temp > $output
else  #run in my newest workstation
 rm $output
 #echo "Use workstation $workstation:$workstationdir to run gnuplot :"
 scp $temp $temp2 $workstation:$workstationdir
 #echo "$0 Copied $temp $temp2 $workstation:$workstationdir " 1>&2
 ssh $workstation "cd $workstationdir ; $temp > $output"
 checktimes=5;nt=0
 if [ ! -s $output ] && [ $nt -lt $checktimes ] ; then
  sleep 5
  scp "$workstation:$workstationdir$output" .
  nt=`expr $nt + 1`
 fi
 [ ! -s $output ] && echo "WARNing @$0 $oldline: Not plot $output generated in remote machine $workstation" 1>&2
 ssh $workstation "cd $workstationdir ; rm -f $temp $temp2"
fi

#display plot file
if [ $display -eq 1 ] ; then
 nohup display $output &
 #display $output >& $temp6
 sleep 2
fi

echo "=> Output seq aln is $output"

[ $debug -eq 1 ] && cat $temp

rm -f $temp* $temp2* $temp3* $temp4* $temp5* $temp6*; exit
