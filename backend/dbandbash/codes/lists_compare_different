#!/bin/sh 

thisfile="list_compare_different"
this_pid=$$
header=0;doout=0
nameonly=0
removedup=0 #=1: will remove duplicate names in input files
startrow1=0;endrow1=0;startrow2=0;endrow2=0
namecol1=1;namecol2=1
docom=0 #=1:also check common names
dooutsdf=0
dosort="-nosort"

oldline=$*   #all argvs
echo $0 $oldline
if [ -n "$1" ] ; then
 aaa=`echo $1 | awk '{print substr($1,1,1)}'`  #check if first input is -XXX
 while [ $aaa == "-" ] ; do
  case $1 in
   -removedup) removedup=1; shift;;
   -header) header=1;shift;;
   -noheader) header=0;shift;;
   -nameonly) nameonly=1;shift;;
   -range)startrow1=$2;endrow1=$3;startrow2=$2;endrow2=$3;shift 3;;
   -range1)startrow1=$2;endrow1=$3;shift 3;;
   -range2)startrow2=$2;endrow2=$3;shift 3;;
   -col)namecol1=$2;namecol2=$2;shift 2;;
   -col1)namecol1=$2;shift 2;;
   -col2)namecol2="$2";shift 2;;
   -common)docom=1;shift;;
   -out)doout=1;output=$2;shift 2;;
   -sort)dosort=$1;shift;;
   -nosort)dosort=$1;shift;;
   -outsdf)dooutsdf=1;outsdf=$2;shift 2;;
   *) $0; echo "***Fatal error @ $0! Argument $1 is unrecoginized and ignored : $0 $oldline!"; exit;;
  esac
  aaa=`echo "$1" | awk '{print substr($1,1,1)}'`
 done
fi

if [ -n "$8" ] ; then  #Old input w/ 8 args
         infile1=$1
         namecol1=$2
         startrow1=$3
         endrow1=$4
         infile2=$5
         namecol2=$6
         startrow2=$7
         endrow2=$8
   if [ -n "$9" ] ; then
         output=$9;doout=1
   fi
else
if [ -n "$1" ] ; then #New input with 2 args
  infile1=$1
  infile2=$2
else
cat << ttt
   Compare whether 2 compound lists or SDFs files have different compounds as in 2nd list(name defined in specific row)
   Usage [Options] InputFile1 Inputfile2
   Output of different names in InputFile2 
   Can also check multiple cols in InputFile2 from 2019/4

    Or old 8 args:
    $0 InputFile1 NameCol1 StartRow1 EndRow1 
       Inputfile2 NameCol2 StartRow2 EndRow2 [Output(for common compounds)]
   Output of different names in InputFile2. Format same as Input2 or -nameonly
    XRank | X | X | Names

  Options:
    -removedup : remove duplicate names in input files
    -header | -noheader : There is header line in lists and will not count. Default: -noheader
    -nameonly : Only output different names in output file for InputFile2. Default: output whole line of InputFile2
    -range1 | -range2 StartRow EndRow : range for InputFile1 or InputFile2 [Default: all data]
    -range StartRow EndRow : range for both files
    -col1 NameCol : NameCol for InputFile1  [$namecol1]
    -col2 "NameCol2" : NameCol for InputFile2 [$namecol2]
     -col2 can be mutiple cols as "1 2 3 4 5 6" : will compare for all col 1-6, if one-match, then all row consider match 
    -col NameCol : NameCol for both InputFile1 and InputFile2 [$namecol1]
    -common : Also find common/same names of two input lists
    -out Output : Output of different names in InputFile2
    -outsdf OutSDF : SDF output of different names in InputFile2 when it is SDF
     -sort: will sort outSDF to same order as in InputFile2. May take long time
     [-nosort] : default as outSDF is not same order as InputFile2

   NameCol: Which coloumn has the compound name?
   StartRow: Which row to start counting? =[0], starts from beginning
   EndRow:   Which row to stop counting? =[0], stops at ending  

   NOTE: For ONE file recommend to run ./lists_remove_duplicate to remove duplicate compounds  first: -removedup option 

   e.g. 
     $0 -col1 1 -col2 3 -out a_b_diff.xls list1 list2
      #NOTE: unique/different cmpds for list2!
     $0 -col1 2 -col2 "2 3 4 5 6 7 8 9 10" -out FDA_notTM.xls TargetMol.xls FDA20193sm.xls
      #Find FDA drugs in FDA20193sm.xls (CAS# is multiple from col 2)  not included in TargetMol at Library/HollyYin
      #FDA20193sm.xls is generated by ./list_merge_inside -head -col 1 -col2 2 -out FDA20193sm.xls FDA20193s.xls
     $0 -header -col 3 -out new.xls Old.rept.purchase.xls New.rept.purchase.xls 
      #Check duplicate cmpds from two VS purchase list from NCI DTP library. Use col3 CBIS_ID for compare. Output uniq cmpds in 2nd list. See FTO/
     $0 -common -removedup -out 50Knew_diff.xls -outsdf 50Knew_diff.sdf Scaffolds_50Kold_1413.sdf Scaffolds_50Knew_4469.sdf 
      #Check different/common scaffold/cmpd of two SDFs and save diff SDFs in ~/Library
 
  NOTE: output is for List2!!!
  NOTE: ./lists_compare is to find common cmpds between files and also heatmap

ttt
  exit
fi
fi

temp=$$'.tmp';  temp2=$temp'2' ; temp3=$temp'3' ; temp4=$temp'4'; temp5=$temp'5'; temp6=$temp'6'
[ $doout -eq 0 ] && output=$temp3

#######################
ed='/home/holi/database/pipeline_script/'
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My old computer
drd='/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@scalemp1
drd='/isi-dcnl/flower_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-ngs2
drd='/isi-flower/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-gpu1
drd='/net/isi-dcnl/ifs/user_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd ##holi@hpc-access1.coh.org
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My newest computer
isScaleMP=0  #=1: runs on ScaleMP machine, need special code for Schrodinger
if [ -d "/flower_data/" ] ; then
 isScaleMP=1; ed='/flower_data/hongzhili/database/pipeline_script/' #Admin defined directory with scripts
fi
thisfolder=`pwd`; thisfolder=$thisfolder'/'
if [ $thisfolder != $ed ] ; then
 cp $ed/lists_remove_duplicate  $ed/sdf_contactmap $ed/sdf_getName $ed/lists_compare $ed/glide_rept2sdf $ed/sdf_getFromName_many .
fi
infile1o=$infile1
infile2o=$infile2

echo " Check different compounds in List file of  " $infile1 $infile2
echo "  Output list of different is " $output

echo NameCol = $namecol1 FirstRow = $startrow1 EndRow = $endrow1 for $infile1
echo NameCol = $namecol2 FirstRow = $startrow2 EndRow = $endrow2 for $infile2

if [ ! -s $infile1 ] || [ ! -s $infile2 ] ; then
 echo "Fatal error! One file is missing"
 echo "Number of different compounds = -1"
 exit
fi

nc=`echo "$$namecol2" | awk '{print NF}'`
if [ $nc -gt 1 ] ; then
 echo "WARNing: Compare $nc cols in $infile2"
 removedup=0
fi

extension=`echo $infile1 | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
extension2=`echo $infile2 | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
if [ "$extension" == ".sdf" ] ; then
 echo "$infile1 is SDF file"
 ./sdf_getName $infile1 > $temp.list
 infile1=$temp.list
fi
if [ "$extension2" == ".sdf" ] ; then
 echo "$infile2 is SDF file"
 ./sdf_getName $infile2 > $temp2.list
 infile2=$temp2.list
fi

if [ $removedup -eq 1 ] ; then
  echo "Remove duplicate names in input files since -removedup options"
  ./lists_remove_duplicate $infile1 $namecol1 $temp4
  ./lists_remove_duplicate $infile2 $namecol2 $temp5
else
 cp $infile1 $temp4
 cp $infile2 $temp5
fi


#get compound names from $file1
awk 'BEGIN{c='$namecol1';f='$startrow1';e='$endrow1';header='$header';if(f<header){f=header+1}}
{
 if(NR>=f){
  if(e<=0||NR<=e){print $c}
 }
}' $temp4 > $temp 

#awk 'BEGIN{c='$namecol2';f='$startrow2';e='$endrow2'}
#{
# if(NR>=f){
#  if(e<=0||NR<=e){print $c}
# }
#}' $temp5 > $temp2
cp $temp5 $temp2


#------------ Compare two lists
awk -v x="$namecol2" '
BEGIN{
header='$header';nameonly='$nameonly'
file="'$temp'"
        c=0
        while ((getline line < file) > 0) {
          c++
          if(c>0){a[c]=line}
         }
        close(file)
 nc=split(x,z," ");f='$startrow2';e='$endrow2';if(f<header){f=header+1}
 cn=0;cd=0
}
{
 diff=1
 if(NR>=f){
  if(e<=0||NR<=e){
   if(nc==1){
    m=$x;
    #print m,x,a[1],$2 ; exit
    for(i=1;i<=c;i++) {
     if(a[i]==m){diff=0;cd++;break}
    }
    #if(diff==1&&nameonly!=1){cn++;print cn,NR,m," ",$_}
    if(diff==1&&nameonly!=1){cn++;print $_}
    if(diff==1&&nameonly==1){cn++;print m}
   }else{    
    for(j=1;j<=nc;j++){
     u=z[j];m=$u
     for(i=1;i<=c;i++) {
      if(a[i]==m){diff=0;cd++;mname=m;break}
     }
     if(diff==0){break}
    }
    if(diff==1&&nameonly!=1){cn++;print $_}
    if(diff==1&&nameonly==1){cn++;print mname}
   }
  }
 }
}
' $temp2 > $output

num1=`wc -l $output | awk '{print $1}'`
n1=`wc -l $temp | awk '{print $1}'`
n2=`wc -l $temp2 | awk '{print $1}'`
nper1=`awk 'BEGIN{a='$num1';b='$n1'; printf("%2.1f",a/b*100)}'`
nper2=`awk 'BEGIN{a='$num1';b='$n2'; printf("%2.1f",a/b*100)}'`

if [ $dooutsdf -eq 1 ] ; then
 echo "=> Extract SDF for different names in $infile2o"
 #This is very slow when -sort, but can make sure SDF orders the same as input:
 ./glide_rept2sdf $dosort -out $outsdf $output $infile2o 
 #This is fast, but cannot have same order of outsdf to list
 #./sdf_getFromName_many -out $outsdf $infile2o $output
 nsdf=`grep '$$$$' $outsdf | wc -l | awk '{print $1}'`
fi

if [ $header -gt 0 ] ; then  #add header back to output
 head -$header $infile2 > $temp
 cat $output >> $temp
 mv $temp $output
fi 

if [ $docom -eq 1 ] ; then
 echo "==> Check common names in $infile1o $infile2o :"
 ./lists_compare -col1 $namecol1 -col2 $namecol2 $infile1 $infile2 | tee $temp.com
fi

cat << end
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Check different names in list of  $infile1o $infile2o
 Output different names is $output
   NameCol = $namecol1 FirstRow = $startrow1 EndRow = $endrow1 for $infile1
   NameCol = $namecol2 FirstRow = $startrow2 EndRow = $endrow2 for $infile2
 Number of names = $n1 in $infile1
 Number of names = $n2 in $infile2
 Number of different compounds =  $num1 ( $nper1 % ,  $nper2 % )
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
end

[ -s $temp.com ] && grep 'common compounds =' $temp.com
echo "Output different $num1 of $n2 names in $infile2o is $output"
[ $dooutsdf -eq 1 ] && echo " $nsdf SDF of different cmpds from $infile2o saved as $outsdf"

rm -f $temp* $temp2 $temp3 $temp4 $temp5 $temp6
exit
