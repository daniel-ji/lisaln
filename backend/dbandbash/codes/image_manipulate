#!/bin/sh
#Save all scripts to ~/database/pipeline_script   Script template is ./template 

dotime=1;starts=`date +%s` ; starttime=`date`

thisfile=$0
doout=0
debug=0
filen=0
large=1  #=1: add large watermark2.png  =0: add small watermark1.png
position='center'  #position of watermark: center, southeast
postfix='_watermark'
postfixo=$postfix  #Used by nodouble=1
checkname=1  #Only work to .png .gif. =0: No check of name
dowatermark=0
watermark='watermark2.png'  #watermark picture. watermark2.png: large  watermark1.png:small
white=0  #=0: white color as transparant for watermark file
display=0  #=1: display output file
resize=100  #resize watermark file
rotate=0   #rotate of watermark in degree
nodouble=1 #=1: will not add watermark to files with $postfixo _watermark in name 
text=0; textbg='none' #background for text: none, orange, grey, 
font='/usr/share/fonts/bitstream-vera/VeraBd.ttf'
[ ! -d /usr/share/fonts/msttcorefonts ] && font='VeraBd'  #In case no arial font, use VeraBd
[ ! -d /usr/share/fonts/bitstream-vera ] && font='/usr/share/fonts/dejavu/DejaVuSans-Bold.ttf' #otherwise, use DejaVuSans-Bold.ttf

fontsize=25; fontcolor='blue'
transparent=0; tcolor='white'
solid=0;doi=''
overlap=0;blend=0;dissolve=0;over=''
edge=0;edg='';
paint=0; emboss=0; embo=''; negate=''
shadow=0;shad='';shadowsize='10x10';bgcolor='navy'

oldline=$*   #all argvs
if [ -n "$1" ] ; then
 aaa=`echo "$1" | awk '{print substr($1,1,1)}'`  #check if first input is -XXX
 while [ $aaa == "-" ] ; do
  case $1 in
   -debug) debug=1; shift;;
   -out) output="$2"; doout=1;shift 2;;  #Use "$2" to pass argments with blank space inside as d='a b c''
   -large)dowatermark=1;large=1; position='center';watermark='watermark2.png';shift;;
   -small)dowatermark=1;large=0; position='southeast';watermark='watermark1.png';shift;;
   -position)position=$2;shift 2;;
   -postfix)postfix=$2;shift 2;;
   -dowatermark)dowatermark=1;shift;;
   -watermark)dowatermark=1;watermark=$2;white=1;text=0;shift 2;;
   -white)dowatermark=1;white=1;shift ;;
   -text)dowatermark=2;text="$2";position='southeast';shift 2;;
   -textbg)textbg=$2;shift 2;;
   -fontsize)fontsize=$2;shift 2;;
   -fontcolor)fontcolor=$2;shift 2;;
   -resize)resize=$2;shift 2;;
   -rotate)rotate=$2;shift 2;;
   -display)display=1; shift;;
   -displayall)display=2; shift;;
   -nocheckname)checkname=0;shift;;
   -double)dowatermark=1;nodouble=0;shift;;
   -transparent)transparent=1; shift;;
   -tcolor)transparent=1; tcolor=$2;shift 2;;
   -solid)solid=$2;shift 2;;
   -overlap)overlap=1; shift;;
   -blend)blend=$2;over=$over' '$1' '$2;shift 2;;
   -dissolve)dissolve=$2;over=$over' '$1' '$2;shift 2;;
   -Edge)edge=1;edg=$edg' -negate -colorspace Gray';shift;;
   -edge)edge=$2;edg=$edg' -negate';shift 2;;
   -colorspace)colorspace=$2;edg=$edg' '$1' '$2;embo=$embo' '$1' '$2;shift 2;;
   -paint)paint=$2;shift 2;;
   -Paint)paint=1;shift;;
   -emboss)emboss=$2;shift 2;;
   -Emboss)emboss='0x0.5';shift;;
   -negate)negate=$negate' '$1;shift 2;;
   -shadow)shadow=1;shift;;
   -shadowsize)shadow=1;shadowsize=$2;shift 2;;
   -bgcolor)bgcolor=$2;shift 2;;
   -i)doi=$doi' '"$2";shift 2;;


   *) $0; echo "***Fatal error @ $0! Argument $1 is unrecoginized and ignored : $0 $oldline!" 1>&2 ; exit;;
  esac
  [ -n "$1" ] && aaa=`echo "$1" | awk '{print substr($1,1,1)}'` || aaa='NA'
 done
fi
[ $debug -eq 1 ] && echo $0 $oldline

if [ -n "$1" ] ; then
 infile="$1";filen=1
 if [ -n "$2" ] ; then
  infile2=$2;filen=2
 fi
 if [ -n "$3" ] ; then
  infile3=$3;filen=3
 fi
 if [ -n "$4" ] ; then
  infile4=$4;filen=4
 fi
 if [ -n "$5" ] ; then
  infile5=$5;filen=5
 fi
else
cat << ttt
    ****NOTE: Copyright belongs to Dr. Hongzhi Li *******

 Manipulate image orders: Can call a series of operations based on this order
 . Make image transparent for specific colored region: -transparent
 . Apply and convert commands: -i "convert commands"
 . Reverse color: -negate
 . Oil-Painting, blobs of color: merging of neighbourhood colors into larger single color areas: -paint
 . Emboss effect: generate the effect of a acid impression of a grey-scale image on a sheet of metal. : -emboss
 . Convert to edge-image by edge detection: -edge
 . Add Text or watermark to image: -text
 . Add shadow on border of image: -shadow
 . Overlap of images : -overlap -blend 0-100 -dissolve 0-200
 See http://www.imagemagick.org/Usage/

 To generate watermark picture:
   Make white color transparent: convert watermark2.png -fuzz 2% -transparent white watermark.png
 Overlap watermark picture to graphic:
   To center:
    composite -dissolve 50% -gravity center -quality 100 \( watermark2.png -resize 50% \) PDB.jpg PDB.jpg
   To right-bottom conner:
    composite -dissolve 50% -gravity southeast -quality 100 \( watermark1.png -resize 50% \) PDB.jpg PDB.jpg
   Label text on image: http://www.imagemagick.org/Usage/annotating/#annotating
  convert PDB.gif -background Orange  label:'PDB Name' -gravity Center -append PDB_label.jpg

 Usage: $0 [Options] File/SubFolder [File2/SubFolder2 .. File5/SubFolder5]
 Options:
  -debug : debug model on
  -display : display last one output graphics
  -displayall : display all output pictures including original and intermediates
  -nocheckname : will not check if extension is .png or .gif. Default: Only work with files that has .png or .gif
  -postfix PostFix : Output postfix as InputPostFix.* . Default Input${postfix}.gif/.png
  -position Position : Position to add watermark, such as center, southeast. [$position] 

#label text
  -text "Text" : Add "Text" as watermark instead of watermark image
   -textbg BackGroundColor : Text background color [$textbg]
   -fontcolor Color : Text color [$fontcolor]
   -fontsize Size : Text font size [$fontsize]

#watermark:  See: http://www.xoogu.com/2013/how-to-automatically-watermark-or-batch-watermark-photos-using-imagemagick/
  -dowatermark : turn on watermark function 
  -watermark WatermarkFile : File name of watermark [$watermark]
   -white : make WatermarkFile transparent at white colored part
  -double : allow add watermark to picture with $postfixo inside. Default: will NOT add watermark to file with $postfixo in name to avoid double-watermark
  -resize Percentage : resize percentage of watermark file [$resize]
  -rotate Degree : rotate degree of watermark [$rotate]
  -large : Large watermark by adding watermark2.png in center [default]
  -small : Small watermark by adding watermark1.png in right-bottom

#transparent
  -transparent : Make picture transparent for parts that colored as $tcolor
   -solid Num : Image #Num will be solid, no transparent. =-1: last image will be solid
   -tcolor Color : Color that will be transparent. [$tcolor]

#overlap images See http://www.imagemagick.org/Usage/compose/
  -overlap : overlap images by first images on top of 2nd images
  -blend BlendPercentage : blend percentage of overlapped images. =40: first image counts 40% and 2nd image count 60% 
    =0/100: first/2nd image disappear. Both images treated equally, not like -dissolve
  -dissolve DissPercentage : =0-100: Adjust transparency of first image then on top 2nd image. =0: first image disappear
    =100-200: Adjust the transparency of 2nd image and the first image unchanged. =200: 2nd image disappear
  
#edge detection: Convert to edge-image See http://www.imagemagick.org/Usage/transform/
  -Edge : same as -edge 1 -negate -colorspace Gray 
  -edge Edge : Turn on edge detection. Pixels for edge. =1: sharp edge
  -colorspace Color : Color to show edges. =Gray: Black/white edges. Others: RGB CMY CMYK

#add shadow border
  -shadow : turn on
  -shadowsize XxY : size of shadow border [$shadowsize]
  -bgcolor Color : shadow color [$bgcolor]

#Other effects: See http://www.imagemagick.org/Usage/transform/
  -negate : Reverse color
  -Paint: Oil-Painting with size=1, same as -paint 1
   -paint PaintSize : Oil-Painting, blobs of color: merging of neighbourhood colors into larger single color areas. =3
  -Emboss: same as -emboss 0x0.5
   -emboss radiusXsigma : Emboss effect. only the sigma being important. e.g. -emboss 0x0.5  0x0.9  0x1  0x2
   -colorspace Color : Color to show emboss. =Gray: black/white. Others: RGB CMY CMYK 

  -i "convertCommands" : all convert commands, such as: (see http://www.imagemagick.org/script/command-line-options.php)
   "-contrast -contrast" : enhance image contrast
    "+contrast +contrast" : reduce image contrast
   "-brightness-contrast 50" : Adjust the brightness and/or contrast [-100, 100]
   "-noise 1 -attenuate 0.5" : reduce noise (radius=1) by intensity of 0.5 (-attenuate 1: maximum noise reduce)
    "+noise Gaussian -attenuate 1" : add noise (type=Gaussian, Impulse, Random, Uniform)
   "-blur 1x3" "-blur 3": blur at radius X/Y =1/3
    "-channel R -blur 5" : Only blur red-channel
   "-motion-blur 0x12+45" : blur in one-direction 45 degree as big motion. radiusxsigma+angle+bias 
   "-sharpen 1 " "-sharpen 2.5x6 -channel R" : sharpen the image at radius=1 or X/Y for a color channel
    "-unsharp 2x2" : Unsharpen

   "-vignette 0x50 -background cyan" : Vignette Photo Transform (gradually dimmed edge to cyan)  Cool!
   "-shade 45x45 -background none" : shade the image using a distant light source to Gray color azimuthXelevation: like carved image, espeically for 3D effect of text. Cool!
   "-evaluate subtract 12.5%  -evaluate multiply 2" : RGB color substract 12.5% then x2 to highlight the image
   "-channel R  -evaluate multiply .2" : Add red-channel filter to reduce red-component to 20%
   "-border 10 -bordercolor white" : Add inside border at thickness=10 pixels as white border
   "-raise 10" "+raise 15" : Raise or sunk borders to turn image like button

   #Warping commands. See http://www.imagemagick.org/Usage/warping/#simple   
   "-resize 400%", "-size 960x680" : define size
   "-rotate 45" : rotate by 45 degree for none-mirror image
   "-shear 0x45" : rotate in view-direction (X/Y) to distort image. Can be used to make 3D Cube
   "-wave 50x60" : wave the image (Sine Wave Displacement) in X/Y direction
   "-implode .6" "-implode -2" : pull all the pixels toward(positive)/away(negative) the center.
   "-swirl 180" : swirl/spin image around center by 180 degrees 
   "-flop -flip -transpose -transverse" : mirrored image first. flop-mirror image  flip-up/down
   "-roll +0+200" : roll image in vertical as in bad movie   

 Example: $0 -dowatermark A.png B.gif C.gif D.png   #Add large watermark to 4 files
          $0 -small '*.png'   #Add small watermark to all .png files
          $0 -double Folder/     #all .png or .gif (even as *_watermark* to be double-watermark) files in subfolder Folder/
          $0 -dowatermark .  #all .png or .gif but not *_watermark* files in current folder
          $0 -watermark WaterMark.png -resize 50 -rotate 45 -position center A.png  
            #Use watermark picture as WaterMark.png adding in center and rotate 45 degree
          $0 -text "Copy Right HLi" -position northwest -fontsize 30 -fontcolor red -out A_mw.png A.png  
            #Add watermark as TEXT on top-left and output as A_mw.png
          $0 -edge 2 -colorspace Gray A.jpg
            #Convert image to black/white edge-only image
          $0 -paint 3 A.jpg
            #Oil-paint effect
          $0 -emboss 0x0.9 -colorspace Gray A,png
            #Emboss effect
          $0 -overlap -blend 50 -out Overlap.png A.png C.png
            #half-half blend of two images
          $0 -overlap -transparent -solid -1 -out Overlap.png A.png C.png D.png E.png
            #overlap transprent A.png C.png D.png on solid E.png
          $0 -displayall -i "-contrast -contrast +noise Gaussian -blur 1" -Emboss -Paint A.png
            #Apply convert commands to image: enhance contrast, add Gaussian noise and blur image. Then emboss and paint
          $0 -displayall -overlap -transparent -solid 1 -out Overlap.png BW.png C.png
            #Overlap transparent C.png on solid BW.png for outfile Overlap.png for two pymol images as ray_trace_mode=2
   

 NOTE: To manipulate movie, see ./movie_manuplate -watermark -wpos bl -wpic watermark1.png
 NOTE: pymol can do cool movie_fade in https://pymolwiki.org/index.php/Movie_fade
          movie_color_fade : https://pymolwiki.org/index.php/Movie_color_fade
       Pymol movie use ./pymol_movie
 NOTE: To convert images to animation/movie: ./movie_manuplate -movie
   Or see: http://www.imagemagick.org/Usage/anim_basics/
 NOTE: More functions/effects see http://www.imagemagick.org/Usage/compose/
 NOTE: Can take series of options together by the order listed above. e.g. -emboss 0x1.2 -paint 3

ttt
  exit
fi

temp=$0'_'$$'.tmp';  temp2=$temp'2' ; temp3=$temp'3' ; temp4=$temp'4'; temp5=$temp'5'; temp6=$temp'6'

#Check root folder: scalemp1=p-gpu1; p-ngs=hpc
ed='/home/holi/database/pipeline_script/'
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My old computer
drd='/isi-dcnl/flower_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-ngs2
drd='/isi-flower/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-gpu1
drd='/net/isi-dcnl/ifs/user_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd ##holi@hpc-access1.coh.org
drd='/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@scalemp1
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My newest computer
thisfolder=`pwd`; thisfolder=$thisfolder'/'
if [ $thisfolder != $ed ] ; then
 cp -f $ed/back $ed/get $ed/symbol.txt $ed/watermark1.png $ed/watermark2.png .
fi

R='\033[31m';G='\033[32m';Y='\033[33m';B='\033[34m';M='\033[35m';C='\033[36m'; N='\033[m'  #Color text of RBG Yellow Magenta Cyan Normal for echo -e 
HR='\033[41m';HG='\033[42m';HY='\033[43m';HB='\033[44m';HM='\033[45m';HC='\033[46m';  #High-light Color text of RBG Yellow Magenta Cyan for echo -e
A=`awk '{print $1}' symbol.txt | head -1`;PM=`awk '{print $2}' symbol.txt | head -1`;BL=`awk '{print $11}' symbol.txt | head -1` #Symbol for Amstrong and +/- for cat/echo
LE=`awk '{print $3}' symbol.txt | head -1`;GE=`awk '{print $4}' symbol.txt | head -1`;NE=`awk '{print $8}' symbol.txt | head -1` #Symbol for <= ; >= ;!=
alpha=`awk '{print $20}' symbol.txt | head -1`; beta=`awk '{print $21}' symbol.txt | head -1`;
#echo -e "$R ColorText $A $N"

#curdir=`pwd`
#curdiro=`pwd`

echo $infile
[ -d $infile ] && curdir=$curdiro'/'$infile
ls -l $infile | awk '{printf("%s/%s\n","'$curdir'",$NF)}' > $temp
#ls -l $infile | awk '{printf("%s/%s\n","'$curdir'",$NF)}' > $temp2
ls -l $infile  | awk '{print $NF}' > $temp2
if [ $filen -ge 2 ] ; then
 [ -d $infile2 ] && curdir=$curdiro'/'$infile2
 ls -l $infile2 | awk '{printf("%s/%s\n","'$curdir'",$NF)}' >> $temp
 #ls -l $infile2 | awk '{printf("%s/%s\n","'$curdir'",$NF)}' >> $temp2
 ls -l $infile2  | awk '{print $NF}' >> $temp2
fi
if [ $filen -ge 3 ] ; then
 [ -d $infile3 ] && curdir=$curdiro'/'$infile3
 ls -l $infile3 | awk '{printf("%s/%s\n","'$curdir'",$NF)}' >> $temp
 #ls -l $infile3 | awk '{printf("%s/%s\n","'$curdir'",$NF)}' >> $temp2
 ls -l $infile3  | awk '{print $NF}' >> $temp2
fi
if [ $filen -ge 4 ] ; then
 [ -d $infile4 ] && curdir=$curdiro'/'$infile4
 ls -l $infile4 | awk '{printf("%s/%s\n","'$curdir'",$NF)}' >> $temp
 #ls -l $infile4 | awk '{printf("%s/%s\n","'$curdir'",$NF)}' >> $temp2
 ls -l $infile4  | awk '{print $NF}' >> $temp2
fi
if [ $filen -ge 5 ] ; then
 [ -d $infile5 ] && curdir=$curdiro'/'$infile5
 ls -l $infile5 | awk '{printf("%s/%s\n","'$curdir'",$NF)}' >> $temp
 #ls -l $infile5 | awk '{printf("%s/%s\n","'$curdir'",$NF)}' >> $temp2
 ls -l $infile5  | awk '{print $NF}' >> $temp2
fi

if [ $white -eq 1 ] && [ $dowatermark -eq 1 ] ; then
 echo "Set white color in watermark $watermark as transparent"
 convert $watermark -fuzz 2% -transparent white $temp.png
 watermark=$temp.png
fi

nf=`wc -l $temp | awk '{print $1}'`
echo "Total file manipulated = $nf"
[ $solid -eq -1 ] && solid=$nf
[ $dowatermark -eq 1 ] && echo "Add watermark $watermark to  $nf of $infile at $position"
if [ $nf -eq $filen ] ; then
 checkname=0   #will not check name for .png and .gif only
 nodouble=0    #will not avoid to double-watermark to files with _watermark in names
fi

[ $doout -ne 1 ] && output='Overlap.png'
if [ $nf -eq 1 ] ; then
 extension=`echo $input | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
 infile=`basename $input ${extension}`
 [ $doout -ne 1 ] && output=$infile'_m'.${extension}
fi

for (( i = 1 ; i <= $nf ; i++ )) ; do

 #cur=`head -$i $temp | tail -1`
 file=`head -$i $temp2 | tail -1`
 fileo=$file
 extension=`echo $file | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
 infile=`basename $file ${extension}`
 ofile=`echo $file | awk '{l=length($1)-3;a=substr($1,l,4);if(a==".png"||a==".gif"){print substr($1,1,l-1)}else{print $1}}'`
 extfile=`echo $file | awk '{l=length($1)-3;a=substr($1,l,4);if(a==".png"||a==".gif"){print a}else{print ".png"}}'` 
 did=1; 
 foutfile=$ofile$postfix$extfile
 [ $display -eq 2 ] && nohup display $file &
 [ $nf -eq 1 ]  && outfile=$output
 if [ $checkname -eq 1 ] ; then
  did=`echo $file | awk '{l=length($1)-3;a=substr($1,l,4);if(a==".png"||a==".gif"){print 1}else{print 0}}'`
 fi
 if [ $did -eq 1 ] && [ $nodouble -eq 1 ] && [ $dowatermark -eq 1 ] ; then
  did=`echo $file | grep $postfixo | wc -l | awk '{a=$1;if(a==0){print 1}else{print 0}}'`
  [ $did -eq 0 ] && echo "No watermark added to #$i $file to avoid double-watermark"
 fi
 if [ $did -eq 1 ] ; then

  #transparent
  if [ $transparent -eq 1 ] ; then
   outfile=$infile'_tspa'$extension
   if [ $i -ne $solid ] ; then
    convert $file -fuzz 2% -transparent $tcolor $outfile
    echo "#$i : Set $tcolor color in $file as transparent to $outfile"
   else
     echo "#$i : $file will not be transparent as -solid $solid option"
     outfile=$file
   fi
   file=$outfile
   extension=`echo $file | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
   infile=`basename $file ${extension}`
   [ $display -eq 2 ] && nohup display $outfile &
  fi

  #convert commands
  if [ "$doi" != "" ] ; then
   outfile=$infile'_cmd'$extension
   rm -f $outfile
   convert $file $doi $outfile
   echo "#$i : Apply convert commands of $doi to $file saved $outfile"
   file=$outfile
   extension=`echo $file | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
   infile=`basename $file ${extension}`
   [ $display -eq 2 ] && nohup display $outfile &
  fi


  #reverse color
  if [ "$negate" != "" ] ; then
   outfile=$infile'_neg'$extension
   convert $file $negate $outfile
   echo "#$i : Reverse color of $file by $negate to $outfile"
   file=$outfile
   extension=`echo $file | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
   infile=`basename $file ${extension}`
   [ $display -eq 2 ] && nohup display $outfile &
  fi

  #paint
  if [ $paint -gt 0 ] ; then
   outfile=$infile'_pt'$paint$extension
   convert $file -paint $paint $outfile
   echo "#$i : Oil-paint by size of $paint from $file saved  to $outfile"
   file=$outfile
   extension=`echo $file | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
   infile=`basename $file ${extension}`
   [ $display -eq 2 ] && nohup display $outfile &
  fi

  #emboss
  if [ $emboss != "0" ] ; then
   outfile=$infile'_eb'$extension
   convert $file -emboss $emboss $embo $outfile
   echo "#$i : Emboss effect by $emboss $embo from $file saved  to $outfile"
   file=$outfile
   extension=`echo $file | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
   infile=`basename $file ${extension}`
   [ $display -eq 2 ] && nohup display $outfile &
  fi

  #edge: outline file
  if [ $edge -gt 0 ] ; then
   outfile=$infile'_edge'$edge$extension   
   convert $file  -edge $edge $edg $outfile
   echo "#$i : Edge-image with edge=$edge as $edg from $file saved  to $outfile"
   file=$outfile
   extension=`echo $file | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
   infile=`basename $file ${extension}`
   [ $display -eq 2 ] && nohup display $outfile &
  fi

  #label text and add to image
  if [ "$text" != "0" ] ; then
   #generate image as watermark with TEXT
   watermark=$temp'.png'
   llab='label:'"${text}"
   convert $file -background $textbg -pointsize $fontsize -fill $fontcolor -font $font "$llab" -gravity $position  $watermark
   #convert $file -background $textbg -pointsize $fontsize -fill $fontcolor -font $font -label "${text}" -gravity $position  $watermark
   [ $debug -eq 1 ] && ( ls -l $watermark ; nohup display $watermark & )
   echo "#$i : Add Label text \"$text\" to $file saved in $outfile"
  fi
  if [ $dowatermark -eq 1 ] || [ $dowatermark -eq 2 ] ; then
   outfile=$infile'_wm'$dowatermark$extension
   [ $debug -eq 1 ] && echo "composite -gravity $position \( $watermark -resize ${resize}% -rotate $rotate \)  $file $outfile"
   composite -gravity $position \( $watermark -resize ${resize}% -rotate $rotate \)  $file $outfile
   file=$outfile
   extension=`echo $file | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
   infile=`basename $file ${extension}`
   [ $display -eq 2 ] && nohup display $outfile &
  fi
  [ $dowatermark -eq 1 ] && echo "#$i : Add WATermark $watermark to $file saved in $outfile"

  #add shadow border
  if [ $shadow -eq 1 ] ; then
   outfile=$infile'_shd'$extension
   convert $file  \( +clone  -background $bgcolor  -shadow $shadowsize \) +swap -composite  $outfile
   echo "#$i : Add shadow border of size $shadowsize $bgcolor color to $file as $outfile"
   file=$outfile
   extension=`echo $file | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
   infile=`basename $file ${extension}`
   [ $display -eq 2 ] && nohup display $outfile &   
  fi

  #overlap images
  if [ $overlap -eq 1 ] ; then
   if [ $i -gt 1 ] ; then
    composite $over $prefile $outfile $temp.ov.png
    mv $temp.ov.png $output
    outfile=$output
    echo "Step #$i : Overlap w/ $over of $prefile $outfile saved in $output"
    [ $display -eq 2 ] && nohup display $output &
   fi
  else
   cp -f $outfile $output
  fi
  prefile=$outfile

  [ $display -eq 1 ] && nohup display $outfile &
 fi  #did

done

[ $display -ge 1 ] && echo "***To kill all displays: killall display"

rm -rf $temp* $temp2* $temp3* $temp4* $temp5* $temp6* ; exit
