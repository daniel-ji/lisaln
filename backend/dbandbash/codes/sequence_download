#!/bin/sh
#Save all scripts to ~/database/pipeline_script
# Script template is ./template 

dotime=1;starts=`date +%s` ; starttime=`date`

proteinurl='http://www.ncbi.nlm.nih.gov/protein/'  #NCBI website for PDB
fastaurl='http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=sequences&rettype=fasta&retmode=text&id=' #works from 2019/8, db=sequences
#fastaurl='http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nucleotide&rettype=fasta&retmode=text&id='  #NCBI site Efetch for NCBI fasta, works until 2019/8
#fastaurl='http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=protein&rettype=fasta&retmode=text&id=' #does NOT work
 #https://dataguide.nlm.nih.gov/eutilities/utilities.html
 #https://www.ncbi.nlm.nih.gov/books/NBK25499/table/chapter4.T._valid_values_of__retmode_and/?report=objectonly
uniprot='https://www.uniprot.org/uniprot/' #Uniprot site: https://www.uniprot.org/uniprot/UniprotID.fasta
thisfile=$0
doout=0
debug=0
type=1  #=1: PDB ID with chain  =2: NCBI Protein GI number
together=1  #=1: get fasta all together in efetch =0: get each seq one by one
removedup=1 #=1: remove duplicate sequence
ncol=1
douniprot=0
head=0
clean=0
force=0
less=0

oldline=$*   #all argvs
if [ -n "$1" ] ; then
 aaa=`echo "$1" | awk '{print substr($1,1,1)}'`  #check if first input is -XXX
 while [ $aaa == "-" ] ; do
  case $1 in
   -less)less=1;shift;;
   -debug) debug=1; shift;;
   -uniprot)douniprot=1;together=0;type=2;shift;;
   -out) output="$2"; doout=1;shift 2;;  #Use "$2" to pass argments with blank space inside as d='a b c';./tem
   -pdb)type=1;shift;;
   -gi)type=2;shift;;
   -ncol)ncol=$2;shift 2;;
   -col)ncol=$2;shift 2;;
   -each)together=0;shift;;
   -keepdup)removedup=0;shift;;
   -head)head=1;shift;;
   -clean)clean=1;shift;;
   -force)force=1;shift;;
   *) $0; echo "***Fatal error @ $0! Argument $1 is unrecoginized and ignored : $0 $oldline!" 1>&2 ; exit;;
  esac
  [ -n "$1" ] && aaa=`echo "$1" | awk '{print substr($1,1,1)}'` || aaa='NA'
 done
fi
[ $debug -eq 1 ] && echo $0 $oldline

if [ -n "$1" ] ; then
 input="$1"
 if [ -n "$2" ] ; then
  output=$2; doout=1
 fi
else
cat << ttt
    ****NOTE: Copyright belongs to Dr. Hongzhi Li *******

 Download fasta sequence of a protein from NCBI based on PDB ID w/ chain or NCBI GI or Refseq NP-xxx XP_xxx or UniprotID by using NCBI efetch
  Can also download from Uniport ID by -uniprot

 Fasta header is different when download from PDBid and UniprotID:
>sp|P39748|FEN1_HUMAN   #From UniprotID in Nuclease/nuclease_purepdb.fasta.txt
>pdb|2OQ6|A             #From PDBid + Chain in JMJD1B/PDBs

 Refseq number : https://www.ncbi.nlm.nih.gov/refseq/about/

 For GI list from Conserved Domain CCD:
How to find sequences/GIs of a domain in CCD or Pfam?
 1. NCBI blast sequence on Conserved Domain CCD: http://www.ncbi.nlm.nih.gov/Structure/cdd/wrpsb.cgi
 2. Click on the Pfam number interested domain
 3. Select 'Row Display' as 'All XXX rows'. Click 'Reformat'
 4. copy/paste the WHOLE sequences with GIs and saved in a file Nuclease_CCD.gi (may need start/end resid to cut output fasta)
 5. Download PDBs and analyze contact motifs, Run ./NCBI_blast_PDBs -gi -pc 90 Nuclease_CCD.gi

 for PDB ID w/chain:
 1. Access NCBI page: http://www.ncbi.nlm.nih.gov/protein/2UW2_A http://www.ncbi.nlm.nih.gov/protein/2UW2_A
 2. Parse the page of fasta download: http://www.ncbi.nlm.nih.gov/protein/145580571?report=fasta
    NCBI GI number of 2UW2_A is 145580571
  Download multiple sequence with GIs: (or NCBI batch Entrez: http://www.ncbi.nlm.nih.gov/sites/batchentrez
   http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nucleotide&rettype=fasta&retmode=text&id=6701965,6701969,6702094,6702105,6702160
   http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nucleotide&rettype=fasta&retmode=text&id=NP_006006.3,XP_009292406.1

How to use SMART and Pfam domain database to find all sequences for a domain and do sequence aligment?
      Ref: nature reviews:genetics 2006. vol7 715
 1. If do not know domain name/ID, search PDB id in Pfam database: http://pfam.xfam.org/   For example: JMJD1B PDB as 4c8d
 2. In return page of 4c8d, click "Domain organisation". Then  click on Jmjc domain
 3. In Jmjc domain page (Family: JmjC (PF02373)), shows 305 structures, 6374 sequences in 248 architectures
 4 Click on Trees to show phylogenetic tree
 5. Click on 305 structures to see all PDBs
 6. Click on 248 archtectures to see all domain-chains that contain jmjc-domain
      For each archtecture, click on "Show all sequences with this architecture" to see human ones
    Best to view architecture in SAMRT database: http://smart.embl-heidelberg.de
     Click "Normal" in SMART homepage
     Search "Domain Selection" for jmjc
      Then 'Expand all nodes' to search 'homo sapiens' 97 architectures: check all humans
      In 'Action selection' can download 97 human sequences. Or 'display the domain architecture'
        Click 'Display proteins'

5. How to align sequence from different species?
  Recommended:  Use ./NCBI_blast -species A.fasta
   1. Use EBI to search all sequences of a protein name (Search DNA2, then click 'Protein seqences').
   2. Pick the interested species, such as _HUMAN _MOUSE _BOVIN(cow) _XENTR(frog)
   3. Download as CSV format with Uniprot ID
   4. Use ./sequence_download -uniport  to download sequence from Uniport ID : https://www.uniprot.org/uniprot/UniprotID.fasta
    For DNA2 (5642 seqs): https://www.ebi.ac.uk/ebisearch/search.ebi?db=proteinSequences&query=DNA2
     Select 9 species as DNA2_HUMAN, DNA2_MOUSE, DNA2_CHICK
     Download seqs: ./sequence_download -uniprot -head -ncol 2 species.csv
   5. Use alignment tools to align the downloaded sequences (MultAlin etc.)
      Best align is T-coffee (need remove empty lines in fasta file. Put human in first record)
       http://tcoffee.crg.cat/apps/tcoffee/do:regular
      Best view is MultAlin : it changed the order of species, put best seq as first. Not good to analys
       http://multalin.toulouse.inra.fr/multalin
      Manage seq align file by ./seq_align_rearrange
      Display a range of seq align: ./seq_align_check -fasta -name DNA2_HUMAN -range 215 230 species_fasta.aln.txt

 NOTE: Must have chain name for 2UW2! If no chain name, there must be 2UW2.pdb available to extract PDBs

 Usage: $0 [Options] List(.txt or .csv)|PDBIDw/Chain|GI|UniprotID

 Options:
  -debug : debug model on
  -less : less display
  -out Output : User defined output. Deafult: Input.fasta.txt
  -each : get fasta one-by-one from NCBI efetch. default: efetch together
  [-pdb] : Input is PDB ID with chain
  -gi : input is NCBI GI number
  -col | -ncol ColNum : col number to find GI/PDBID in list [$ncol]
   -head : there is headerline in list
  -keepdup : keep duplicate sequences in output 
  -uniprot : Use UniprotID for sequence of isoform 1
  -force : force to download even if exists

 Example:
     $0 -gi NP_006006.3  #get fasta of refseqID. WARNing: NM_ XM_ will return RNA/DNA fasta!
     $0 -gi -out o.fasta NP_006006.3,XP_009292406.1     #Two NCBI Refseq#       
     $0 -gi refseqList.txt     #Refseq List
     $0 -gi 6702094            #NCBI GeneID/EntrezID GI#
     $0 -gi giList.txt
     $0 2uw2A
        #Need to provide chain name. Otherwise, 2uw2.pdb needed to extract chain names
     $0  2UW2
        #If no chain name provided, there must be 2UW2.pdb available to extraxt out chain names
     $0 -out List.fasta.txt PDBList
     $0 -uniprot -head -col 2 species.csv
        #Use UniprotID to download seqs for species which is downloaded from EBI search of protein names. Run in ~/DNA2

 NOTE: To aln seq by Clustral, run ./clustal_seq_align
 NOTE: To run NCBI blastp (see ARI1/), use ./NCBI_blast -pdb ARI1A.fasta.txt
 NOTE: Another multiple seq aln tools is NCBI COBALT
 NOTE: To rearrange aligned sequence at different line length, run: ./seq_align_rearrange -keeptit -keepdot -space 3 -len 100 $output
 NOTE: To display a specific range of alignment, run: ./seq_align_check -fasta -name DNA2_HUMAN -range 215 230 $output
 NOTE: Another way to download seq is ./UniProt_get -fasta UniprotID/Name/...


   NOTE: ./seq_align_rearrange to manage seq align file
   NOTE: Display a range of seq align: ./seq_align_check -fasta -name DNA2_HUMAN -range 215 230 species_fasta.aln.txt  
   NOTE: ./sequence_download to download NCBI fasta (same as fasta download from PDB site) sequences for PDBs
   NOTE: ./fasta_fromPDB to convert PDB into sequence fasta
   NOTE: ./fasta_byPDB to extract fasta from multiple sequence file based on PDB IDs
   NOTE: ./fasta_identity to find the indetical residues of two sequence file
   NOTE: ./fasta_removedup to remove duplicate sequences
   NOTE: To download pdb, run: ./pdb_download
   NOTE: To do seq aln and cluster by seq identity for protein similarity, run ./clustal_seq_align

   NOTE: Some PDBs do not have NCBI fasta associated with. e.g. 3BOG_D or many DNA chains in PDB
   WARNing: PDB (NCBI) fasta sequence can be totally different to PDB residue numbering! There could be missing N-term, mutations and missing regions that
         cause the mis-match PDB resid to fasta. See http://sebastianraschka.com/Articles/misleading-fasta-on-pdb.html
         Real sequence numbering should be fasta either from PDB or NCBI (identical). Use ClustalW2 to compare PDB-convert-fasta to PDB/NCBI download fasta
  WARNIng, if input is refseqID as NM_ XM_, download sequence will be RNA! try use -uniprot
  NOTE: Each uniprotID may have multiple isomers (different seq). Default download could be isomer 1

  WARNing: NCBI updates its efetch occationally. Need check the new version if not working:
   https://dataguide.nlm.nih.gov/eutilities/utilities.html
   https://www.ncbi.nlm.nih.gov/books/NBK25499/table/chapter4.T._valid_values_of__retmode_and/?report=objectonly

  Next: Run ./clustal_seq_align to check protein similarity based on seq identity
  
ttt
  exit
fi

#infile=`echo $input | awk '{l=length($1)-3;a=substr($1,l,4);if(a==".pdb"){print substr($1,1,l-1)}else{print $1}}'`
infile=`echo $input | awk '{n=split($1,a,".");printf("%s",a[1]);for(i=2;i<n;i++){printf(".%s",a[i])}}'`
extension=`echo $input | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
[ $doout -ne 1 ] && output=$infile'.fasta.txt'

if [ $force -eq 0 ] && [ -s $output ] ; then
 echo "WARNing: Use exsiting fasta $output. To re-download, use: $0 -force $odlline"
 exit
fi

temp=$0'_'$$'.tmp';  temp2=$temp'2' ; temp3=$temp'3' ; temp4=$temp'4'; temp5=$temp'5'; temp6=$temp'6'

#Check root folder: scalemp1=p-gpu1; p-ngs=hpc
ed='/home/holi/database/pipeline_script/'
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My old computer
drd='/isi-dcnl/flower_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-ngs2
drd='/isi-flower/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-gpu1
drd='/net/isi-dcnl/ifs/user_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd ##holi@hpc-access1.coh.org
drd='/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@scalemp1
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My newest computer
thisfolder=`pwd`; thisfolder=$thisfolder'/'
if [ $thisfolder != $ed ] ; then
 cp -f $ed/back $ed/get $ed/seq_align_check $ed/html_removebracket $ed/pdb_returnChain $ed/fasta_removedup $ed/CSV_getCol .
 cp -f $ed/clustal_seq_align .
fi

R='\033[31m';G='\033[32m';Y='\033[33m';B='\033[34m';M='\033[35m';C='\033[36m'; N='\033[m'  #Color text of RBG Yellow Magenta Cyan Normal for echo -e 
HR='\033[41m';HG='\033[42m';HY='\033[43m';HB='\033[44m';HM='\033[45m';HC='\033[46m';  #High-light Color text of RBG Yellow Magenta Cyan for echo -e
A=`awk '{print $1}' symbol.txt | head -1`;PM=`awk '{print $2}' symbol.txt | head -1`;BL=`awk '{print $11}' symbol.txt | head -1` #Symbol for Amstrong and +/- for cat/echo
LE=`awk '{print $3}' symbol.txt | head -1`;GE=`awk '{print $4}' symbol.txt | head -1`;NE=`awk '{print $8}' symbol.txt | head -1` #Symbol for <= ; >= ;!=
#echo -e "$R ColorText $A $N"

if [ ! -s $input ] ; then
 echo $input > $temp
else
 if [ "$extension" == ".csv" ] ; then
  ./CSV_getCol -out $temp.xls $input
  awk '{n='$ncol';h='$head';if(NR>h&&NF>0&&substr($1,1,1)!="#"){print $n}}' $temp.xls > $temp
 else
  awk '{n='$ncol';h='$head';if(NR>h&&NF>0&&substr($1,1,1)!="#"){print $n}}' $input > $temp
 fi
fi

nr=`wc -l $temp | awk '{print $1}'`
if [ $type -eq 1 ] ; then  #Check if chains indside PDB. Otherwise, if PDB exists, will auto add chains
 echo -n > $temp2
 for (( i=1; i<=$nr ; i++ )) ; do
  did=0
  name=`head -$i $temp | tail -1`
  name=`echo $name | awk '{l=length($1)-3;a=substr($1,l,4);if(a==".pdb"){print substr($1,1,l-1)}else{print $1}}'`
  lname=`echo $name | awk '{print length($1)}'`
  if [ $lname -eq 4 ] ; then
   if [ -s $name.pdb ] ; then
    did=1
    chs=`./pdb_returnChain $name.pdb`
    echo $chs | awk '{n=length($1);for(i=1;i<=n;i++){printf("%s%s\n","'$name'",substr($1,i,1))}}' >> $temp2
    echo "Chains in #$i $name.pdb : $chs" 
   else
    echo "No chain name in #$i $name . Good luck to find NCBI fasta!"
   fi
  fi
  [ $did -eq 0 ] && echo $name >> $temp2
 done
 mv $temp2 $temp
fi

nr=`wc -l $temp | awk '{print $1}'`
ns=0;ss=0
echo " $nr records in $input requested to get fasta sequence saved in $output"
echo -n > $output
for (( i=1; i<=$nr ; i++ )) ; do
 echo -n "$i "
name=`head -$i $temp | tail -1`
did=0
if [ $type -eq 1 ] ; then #for PDB ID
 pd=`echo $name | awk '{printf("%s_%s",toupper(substr($1,1,4)),substr($1,5,5))}'`
 purl=$proteinurl$pd
 #[ $douniprot -eq 1 ] && purl=$uniprot$name'.fasta'
 wget -t 2 -O $temp3 -o $temp5 $purl >& $temp4
 err=`grep 'ERROR 404: Not Found' $temp5 | wc -l | awk '{if($1>0){print 1}else{print 0}}'`
 if [ $err -eq 1 ] ; then
  echo "Failed to find PDB NCBI page #$i: $pd" 1>&2
  did=1
  #nerr=`expr $nerr + 1`
  #fails=`echo -e $name'\n'$fails`
 else 
  gi=`grep 'FASTA' $temp3 | grep '/protein/' | grep 'report=fasta' | tail -1 | 
  awk '{s=index($_,"/protein/")+9;l=index($_,"?report=fasta")-s;print substr($_,s,l)}'`
  if [ "$gi" == "" ] ; then
   echo "WARNing: No NCBI GI found for #$i $pd : Could be nucleics"
   did=1
  fi
  #echo "#$i : PDB $pd NCBI GI number is $gi"
 fi
else #for GI 
 gi=$name
fi

if [ $did -eq 0 ] ; then
 ss=`expr $ss + 1` 
 [ $ss -eq 1 ] && giall=$gi 
 [ $ss -eq 1 ] || giall=$giall','$gi
 if [ $together -eq 0 ] ; then  #not for GIs together
  url=$fastaurl$gi
  [ $douniprot -eq 1 ] && url=$uniprot$name'.fasta'
  #echo $name $url
  wget -t 2 -O $temp3 -o $temp5 $url >& $temp4
  err2=`grep 'ERROR 404: Not Found' $temp5 | wc -l | awk '{if($1>0){print 1}else{print 0}}'`
  if [ $err2 -eq 1 ] ; then
   echo "Failed to access NCBI fasta for #$i: gi$gi" 1>&2
  else
   ns=`expr $ns + 1`
   cat $temp3 >> $output
   echo " " >> $output
  fi
 fi
fi
done

#Multiple seqs together for GIs
if [ $together -eq 1 ] ; then
 url=$fastaurl$giall
 #echo $url
 #echo wget -t 2 -O $output -o $temp5 $url
  wget -t 2 -O $output -o $temp5 $url >& $temp4
  err2=`grep 'ERROR 404: Not Found' $temp5 | wc -l | awk '{if($1>0){print 1}else{print 0}}'`
  if [ $err2 -eq 1 ] ; then
   echo "Failed to access NCBI fasta all together: gi$giall   Try $0 -each $input" 1>&2
  else
   ns=`grep '>' $output | wc -l | awk '{print $1}'`
  fi
fi

echo ""

if [ $removedup -eq 1 ] ; then
 ./fasta_removedup -keeptitle -out $temp $output 
 mv $temp $output
fi

echo "=> $ns Output fasta sequence for $nr requested from $input saved in $output"

if [ $ns -eq 0 ] ; then
 echo "Fatal warning: No seqs downloaded by $0 : Check NCBI website to see if they changed version!" 1>&2
fi

if [ $less -eq 0 ] ; then
echo "
 WARNing: PDB (NCBI) fasta sequence can be totally different to PDB residue numbering! 
   There could be missing N-term, mutations and missing regions that cause the mis-match PDB resid to fasta. 
   See http://sebastianraschka.com/Articles/misleading-fasta-on-pdb.html
 Real sequence numbering should be fasta either from PDB or NCBI (identical). 
  Use ClustalW2 to compare PDB-convert-fasta to PDB/NCBI download fasta
 Display a range of seq align: ./seq_align_check -fasta -name DNA2_HUMAN -range 215 230 species_fasta.aln.txt
 Use EBI Clustral server to do Clustal seq alignment: ./clustal_seq_align $output

 WARNing: NCBI updates its efetch occationally. Need check the new version if not working:
   https://dataguide.nlm.nih.gov/eutilities/utilities.html
   https://www.ncbi.nlm.nih.gov/books/NBK25499/table/chapter4.T._valid_values_of__retmode_and/?report=objectonly
"
fi

rm -rf $temp* $temp2* $temp3* $temp4* $temp5* $temp6* ; exit
