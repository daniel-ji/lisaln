#!/bin/sh
#Save all scripts to ~/database/pipeline_script   Script template is ./template 

dotime=1;starts=`date +%s` ; starttime=`date`

thisfile=$0
doout=0
debug=0
doless=0
dof=0;dop=0;doc=0

oldline=$*   #all argvs
oldline1=`awk -v ins="$oldline" 'BEGIN{n=split(ins,a," ");for(i=1;i<n;i++){printf("%s ",a[i])}}'` #remove last argv
if [ -n "$1" ] ; then
 aaa=`echo "$1" | awk '{print substr($1,1,1);exit}'`  #check if first input is -XXX
 while [ "$aaa" == "-" ] ; do
  case $1 in
   -debug) debug=1; shift;;
   -out) output="$2"; doout=1;shift 2;;  #Use "$2" to pass argments with blank space inside as d='a b c''
   -less)doless=1;shift;;
   -f)dof=1;shift;;
   -function)dof=1;shift;;
   -p)dop=1;shift;;
   -c)doc=1;shift;;
   *) $0; echo "***Fatal error @ $0! Argument $1 is unrecoginized and ignored : $0 $oldline!" 1>&2 ; exit;;
  esac
  [ -n "$1" ] && aaa=`echo "$1" | awk '{print substr($1,1,1)}'` || aaa='NA'
 done
fi
[ $debug -eq 1 ] && echo $0 $oldline

if [ -n "$1" ] ; then 
 input="$1"
 if [ -n "$2" ] ; then
  output=$2; doout=1
 fi
else
cat << ttt
    ****NOTE: Copyright belongs to Dr. Hongzhi Li *******

 Return GO annotation from a list of GO IDs

 How to download/find GO annotation?
 A. GO annatation can be viewed at Gene Ontology Consortium : http://www.geneontology.org/
 B. Download a set of GO terms at GO Online SQL Environment: http://amigo.geneontology.org/goose
 C. GO database download: http://geneontology.org/page/go-mysql-database-guide
 D. How Do I Do Simple Go Term Lookup Given A Gene (Or Mrna) Identifier? https://www.biostars.org/p/1226/
 E. How to find GO terms of a protein Uniprot ID? Database is at GOA FTP site: ftp://ftp.ebi.ac.uk/pub/databases/GO/goa/
    See: ./UniProt_get 
 F. GO annotations in one file saved as GO_annotation.txt : http://www.geneontology.org/doc/GO.terms_alt_ids
  Run my script: ./GO_anaotation

 Go anaotation format: three types: F/P/C
 GO:0000000 (primary) [tab] GO:0000000 (secondary, separated by space(s) if >1) [tab] text string [tab] F|P|C
 ! where F = molecular function, P = biological process, C = cellular component
 ! obs = term is obsolete
 GO:0004527	GO:0008857	exonuclease activity	F
 GO:0006284		base-excision repair	P
 GO:0005739		mitochondrion	C


 GO enrichment analysis: http://geneontology.org/
  One of the main uses of the GO is to perform enrichment analysis on gene sets. 
  For example, given a set of genes that are up-regulated under certain conditions, an enrichment analysis will find which GO terms 
  are over-represented (or under-represented) using annotations for that gene set

 Usage: $0 [Options] "GO(IDs or ID list file)"
  GO ID: can be full name as GO:0000117, or miss GO:, or miss prefix 0s
 Options:
  -debug : debug model on
  -out Output : User defined output
  -less : less display
  -f|-function : Only display the GOs that has moleculer Function | F 
  -p : only display GO terms that has biological process | P
  -c : only display GO terms that has cellular component | C

 Example: $0  GO:0000117    #return GO:0000117 annotation. Full name
          $0  0000117    #return GO:0000117 annotation. Can miss GO:
          $0   117       #return GO:0000117 annotation. Can miss prefix 0s
          $0 "117 90678 33"  #find GO annotations for three IDs (no GO for 90678)
          $0 "GO:0008200 GO:0032036 GO:0005246 GO:0060090"  #run in DOT1L/ for I-TASSER output
          $0 GO.txt    #return GO annotations for GO IDs in list file
          $0 -f GO.txt  #Only display GO terms with molecular function, not P or C
          $0 -c -f GO.txt  #Only display GO terms with cellular component or molecular function, not P 

 NOTE: To search Nuclease proteins, GeneCard use GO-term with nuclease activity to display 130 proteins:
   advanced search "nuclease" in "function"
   See Nuclease/ 
   In Uniprot, there are 656 nuclease records with GO term has nuclease activity:
    ./UniProt_get -noaln -all -addmatch -species human -function "nuclease activity"

 Watch out double GO ids in data: (dealed here already)
  GO:0004527	GO:0008857	exonuclease activity	F 

 NOTE: GO gives "protein serine/threonine kinase activity" more than "protein kinase activity"
      And two protein sets have different, as PDK1 only in less proteins of "protein kinase activity"
  See Rosen/
18      protein serine/threonine kinase activity        CDK17|CDK18|CDK8|CLK1|CSK22|DYR1A|DYR1B|E2AK3|HIPK2|ICK|M4K4|MP2K1|MP2K2|MYO3B|RIPK3|RORB|RORG|SMRCD
11      protein kinase activity CDK17|CDK8|DYR1A|DYR1B|E2AK3|HIPK2|ICK|MP2K1|PDK1|RIPK3|ST32B

 WARNing: ./GO_annotation and Uniprot Data (./UniProt_get) show different function names for TDRD3: 
   methylated histone residue binding (GO) vs. methylated histone binding (Uniprot)

 NOTE: cluster of GO terms of several proteins ./GO_cluster
 NOTE: cluster proteins by GO function/pathway/seq/structural similarity run ./protein_cluster
 WARNing: protein SLFN12 may not has GO terms in Uniprot https://www.uniprot.org/uniprot/Q8IYM2.But this family has function papers. ./UniProt_get shows ATP binding

ttt
  exit
fi

extension=`echo $input | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
infile=`echo $input | awk '{l=length($1)-3;a=substr($1,l,4);if(a==".pdb"){print substr($1,1,l-1)}else{print $1}}'`
infile=`echo $input | awk '{n=split($1,a,".");printf("%s",a[1]);for(i=2;i<n;i++){printf(".%s",a[i])}}'`
#infile=`basename $input ${extension}`
[ $doout -ne 1 ] && output=$infile'_.xls'

#FATAL WARNing: NEVER delete following temp files! Otherwise last line will erase all files * in folder
# Not recommend to define temp=$0'_'$$'.tmp'  as temp has ./ ahead which may cause trouble when re-use it to define temp file name
temp=$$'.tmp';  temp2=$temp'2' ; temp3=$temp'3' ; temp4=$temp'4'; temp5=$temp'5'; temp6=$temp'6'

#Check root folder: scalemp1=p-gpu1; p-ngs=hpc
ed='/home/holi/database/pipeline_script/'
drd='/home/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My old computer
drd='/isi-dcnl/flower_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-ngs2
drd='/isi-flower/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-gpu1
drd='/net/isi-dcnl/ifs/user_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd ##holi@hpc-access1.coh.org
drd='/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@scalemp1
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My newest computer
thisfolder=`pwd`; thisfolder=$thisfolder'/'
if [ $thisfolder != $ed ] ; then
 cp -f $ed/back $ed/get $ed/symbol.txt .
fi

if [ ! -s "$input" ] ; then
 [ $doless -ne 1 ] && echo "Find GO anontation for GO $input"
 echo $input | awk '{for(i=1;i<=NF;i++){print $i}}'  > $temp
else
 [ $doless -ne 1 ] && echo "Find GO anontation for GO IDs in $input"
 cp  $input $temp
fi

num=`wc -l $temp | awk '{print $1}'`
if [ $doless -ne 1 ] ; then
 echo "=> Total $num GO IDs with annotations as from $ed/GO_annotation.txt:"
 [ $doc -eq 1 ] && echo " Only display GO terms have cellular component as -c"
 [ $dop -eq 1 ] && echo " Only display GO terms have biological process as -p"
 [ $dof -eq 1 ] && echo " Only display GO terms have molecular function as -f"
fi
#WATCH out this double GO terms: GO:0004527	GO:0008857	exonuclease activity	F
for (( i=1; i<=$num ; i++ )) ; do
 goid=`head -$i $temp | tail -1 | awk '{print $1}'`
 grep $goid $ed/GO_annotation.txt > $temp2
 awk 'BEGIN{id="'$goid'";doc='$doc';dop='$dop';dof='$dof';doall=doc+dop+dof;nf=0}{
  m=index($1,id);m2=index($2,id)  #partial match and match last part
  if($1==id||$2==id||(m>0&&substr($1,m,7)==id)||(m2>0&&substr($2,m2,7)==id)){  #count first GO and double GO
   if(doall==0){print $_; did=1;exit}
   if((dof==1&&$NF=="F")||(doc==1&&$NF=="C")||(dop==1&&$NF=="P")){
    if(doall==1){
     split($_,a,"\t")
     print a[3]
    }else{
     print $_; did=1;exit
    }
   }
  }  #exact match
 }END{if(did==0&&doall==0){print "No GO annotation found for ",id}}' $temp2
done

if [ $doless -ne 1 ] ; then
 echo "F=molecular function, P=biological process, C=cellular component obs=term is obsolete"
 echo "
 GO enrichment analysis: http://geneontology.org/
  One of the main uses of the GO is to perform enrichment analysis on gene sets. 
  For example, given a set of genes that are up-regulated under certain conditions, an enrichment analysis will find which GO terms 
  are over-represented (or under-represented) using annotations for that gene set
"
fi

if [ "$temp" == "" ] ; then
 echo "FATAL error: temp files are NOT defined: all files in folder could be erased!!! Rewrite $0 script";exit
fi
rm -f $temp* $temp2* $temp3* $temp4* $temp5* $temp6* ; exit  #Do NOT use rm -rf will may delete subfolders

