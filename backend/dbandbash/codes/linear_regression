#!/bin/sh
#Save all scripts to ~/database/pipeline_script
# Script template is ./template 

thisfile=$0

istwo=0 #=0: Only one data input =1: two input files
head1=0 #=1: has header in first file.
head2=0 #=1: has header in 2nd file
col1=1  #X-axis: col1 in first file
col2=2  #Y-axis: col2 in first/2nd file
namecol1=0 #In case two input files, name col for first file. Use name to merge two files. =0: Simple merge without check name
namecol2=0 #In case two input files, name col for 2nd file. =0: Simple merge without check name   
oldline=$*   #all argvs
do1=0;do2=0
cut=0  #cutoff value for R2. Less than cut will be set for 0 to avoid R2 value as 9.61551e-05
docut=0
dognu=1
extra='';extra2='';extra3='';title=" "
xlabel="X";ylabel="Y"
dosen=0;sen=""
moredig=0
less=0

#echo $0 $oldline
if [ -n "$1" ] ; then
 aaa=`echo $1 | awk '{print substr($1,1,1)}'`  #check if first input is -XXX
 while [ $aaa == "-" ] ; do
  case $1 in
   -less)less=1;shift;;
   -moredig)moredig=1;shift;;
   -sen)dosen=1;sen=$1;shift;;
   -head) head1=1; shift;;
   -head2) head2=1;shift;;
   -col1) col1=$2;shift 2;;
   -col2) col2=$2;shift 2;;
   -namecol1) namecol1=$2;shift 2;;
   -namecol2) namecol2=$2;shift 2;;
   -range1)do1=1;min1=$2;max1=$3;shift 3;;
   -range2)do2=1;min2=$2;max2=$3;shift 3;;
   -input2) input2=$2;istwo=1;shift 2;;
   -cut)cut=$2;docut=1;shift 2;;
   -usecut)cut=0.0001;docut=1;shift;;
   -noplot)dognu=0;shift;;
   -plot)dognu=1;shift;;
   -extra)extra=$extra' '"$2"' ;';shift 2;;
   -extra2)extra2=$extra2' '"$2";shift 2;;
   -xlabel)xlabel="$2";shift 2;;
   -ylabel)ylabel="$2";shift 2;;
   -out)extra3=$extra3' '$1' '$2;shift 2;;
   -title)title="$2";shift 2;;
   
   *) $0; echo "***Fatal error @ $0! Argument $1 is unrecoginized and ignored : $0 $oldline!"; exit;;
  esac
  aaa=`echo "$1" | awk '{print substr($1,1,1)}'`
 done
fi

if [ -n "$1" ] ; then
 input=$1  
 [ -n "$2" ] && col1=$2
 [ -n "$3" ] && col2=$3
else
cat << ttt
 Calculate linear fitting equation and R-squared value of two sets of data: y=a*x+b
  For non-linear equation, try to find the linear part by using log etc. See ./twohits

 Pitfalls of linear regression: outlier data may cause faked R2 as in https://en.wikipedia.org/wiki/Linear_regression
   The data sets in the Anscombe's quartet are designed to have approximately the same linear regression line
    Anscombe's quartet to show failure of linear regression: https://en.wikipedia.org/wiki/Anscombe%27s_quartet
  Better solution: -sen : Sen’s Slope / Theil–Sen estimator to reduce outliers https://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator
    It has a breakdown point of 29.3% for outliers
    Sen's Slope in Excel can download: https://www.statisticshowto.datasciencecentral.com/sens-slope-theil-sen-estimator/
    Method: https://www.jamesuanhoro.com/post/theil-sen-regression/
    1.Plot a line between all the points in your data
    2.Calculate the slope for each line
    3.The median slope is your regression slope a: Median is the "middle" of a sorted list of numbers. If there are two in middle: take the average of two points 
    4.There are several methods to obtain the intercept: https://stats.stackexchange.com/questions/50587/intercept-calculation-in-theil-sen-estimator
     A. b=median of (y−a*x) : probably the most common (used in this script)
     B. b=(Y-median)-a*(X-median)  : X/Y-median is the Median value of X/Y
    The coefficient determination (R2), see: https://www.wikiwand.com/en/Coefficient_of_determination
     R2=1-SSres/SStot
     Theil–Sen estimator cannot give high R2 as well when many outliers 

  Also: Regression dilution/regression attenuation : https://en.wikipedia.org/wiki/Regression_dilution
 See Robust regreesion: https://en.wikipedia.org/wiki/Robust_regression

 Usage: [Options] $0 InputFile1 [col1] [col2]
 Options:
  -less : less display
  -head : there is header in first file
  -head2 : there is header in 2nd file
  -col1 C1 : X-axis data col in first file
  -col2 C2 : Y-axis data col in first/2nd file
  -namecol1 N1 : In case two files, name col in first file. Use name to merge two files. [default]=0: Simple merge without check name
  -namecol2 N2 : In case two files, name col in 2nd file.  [default]=0: Simple merge without check name
  -range1 | -range2 Min Max : data out of [Min,Max] will not include in calculation 
  -input2 InputFile2 : Y-axis data is from the 2nd file
  -cut Cutoff : cutoff value for R2. Less than cut will be set for 0 to avoid R2 value such as 9.61551e-05 [$cut]
  -usecut : set R2 cutoff value as 0.0001 to avoid R2 value shown as e-05
  -sen : Use Sen’s Slope / Theil–Sen estimator to reduce outliers. slower but better to exclude outlier
  -moredig : show more digitals for fitting values (up to 6 digits)
  -noplot | [-plot] : no gnuplot of fitting
   -out outputImage : image output .gif
   -xlabel|-ylabel "AxeLabel" : Label for X/Y-axis 
     xWANRing: cannot have space in AxeLabel !!!
   -title "Title" : Title display of plot
   -extra "ExtraGNUCommand" : Other gnuplot commands
   -extra2 "ExtraPlotCommand" : Other ./do_gnuplot script commands
     e.g. -extra2 "-out gnu.gif" : save plot as gnu.gif
    
 
 Example: $0 -xlabel "GScore in Dock" -ylabel "IC50" -extra2 "-out gnu.gif" X.dat   
             #Calculate regression of col 1 and col 2 in file of no header and plot data
             # Plot saved as gnu.gif
          $0 -cut 0.0001  X.dat  #setup cutoff value for R2. <0.0001 will be set for 0 to avoid R2 value such as 9.61551e-05
          $0 -head -col1 17 -col2 18 Exp_measured_Complete_Library_B0730.txt 
          $0 -head -head2 -col1 2 -namecol1 1 -col2 17 -namecol2 2 -input2 Exp_measured_Complete_Library_B0730.txt B0730-2_Qikprop_sol.txt
          $0 -sen ... #Use Sen’s Slope / Theil–Sen estimator to reduce outliers: slower but better to exclude outlier
           

  NOTE: R2 value is different from regular fitting and Theil–Sen estimator
  NOTE: A fast build-in script to calculate many data sets, see ./NCI_Array_core
  NOTE: data with value of na, NA or - will not be counted. updated 2019/5 
  WARNing: must modify this script to exclude none-exisits values such as na -. Otherwise, output is not reliable!
    awk will cal as: 1+none=1 ; 1*none=0

ttt
  exit
fi

ed='/home/holi/database/pipeline_script/'
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My old computer
drd='/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@scalemp1
drd='/isi-dcnl/flower_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-ngs2
drd='/isi-flower/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-gpu1
drd='/net/isi-dcnl/ifs/user_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd ##holi@hpc-access1.coh.org
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My newest computer
isScaleMP=0  #=1: runs on ScaleMP machine, need special code for Schrodinger
if [ -d "/flower_data/" ] ; then
 isScaleMP=1; ed='/flower_data/hongzhili/database/pipeline_script/' #Admin defined directory with scripts
fi
thisfolder=`pwd`; thisfolder=$thisfolder'/'
if [ $thisfolder != $ed ] ; then
 cp $ed/list_mergeTwo  $ed/do_gnuplot .
fi

temp=$0'_'$$'.tmp';  temp2=$temp'2' ; temp3=$temp'3' ; temp4=$temp'4'

if [ ! -s $input ] ; then
 echo "Fatal error @$0 $oldline No input $input exists"
 exit
fi

if [ $istwo -eq 1 ] ; then
 if [ ! -s $input ] ; then
  echo "Fatal error @$0 $oldline No input $input2 exists"
  exit
 fi

 [ $namecol1 -eq 0 ] && namecol2=0
 [ $namecol2 -eq 0 ] && namecol1=0
 cat $input | awk 'BEGIN{a='$col1';b='$namecol1';h1='$head1'}{if(NR>h1){if(b==0){print $a}else{print $a,$b}}}' > $temp2
 n1=`wc -l $temp2 | awk '{print $1}'`
 echo "$n1 records in $input of col $col1 and namecol as $namecol1 as X-axis data" 
 cat $input2 | awk 'BEGIN{a='$col2';b='$namecol2';h1='$head2'}{if(NR>h1){if(b==0){print $a}else{print $a,$b}}}' > $temp3
 n2=`wc -l $temp2 | awk '{print $1}'`
 echo "$n2 records in $input2 of col $col2 and namecol as $namecol2 as Y-axis data"
 if [ $namecol1 -eq 0 ] ; then
  paste $temp2 $temp3 > $temp
 else
  ./list_mergeTwo $temp2 2 $temp3 2 $temp4
  cat $temp4 | awk '{print $1,$3}' > $temp
 fi
else
 cat $input | awk 'BEGIN{a='$col1';b='$col2';h1='$head1'}{if(NR>h1){print $a,$b}}' > $temp
fi

if [ $do1 -eq 1 ] ; then
 s=`echo $min1 $max1 | awk '{a=$2-$1;s=1;if(a<0){s=0};print s}'`
 if [ $s -eq 0 ] ; then
  d=$max1;max1=$min1;min1=$d
 fi
 echo "=> Exclude data out of [$min1 $max1] at col $col1"
 awk 'BEGIN{x='$min1';y='$max1'}{s=1;if($1<x||$1>y){s=0};if(s==1){print $_}}' $temp > $temp2
 mv $temp2 $temp 
fi

if [ $do2 -eq 1 ] ; then
 s=`echo $min2 $max2 | awk '{a=$2-$1;s=1;if(a<0){s=0};print s}'`
 if [ $s -eq 0 ] ; then
  d=$max2;max2=$min2;min2=$d
 fi
 echo "=> Exclude data out of [$min2 $max2] at col $col2"
 awk 'BEGIN{x='$min2';y='$max2'}{s=1;if($2<x||$2>y){s=0};if(s==1){print $_}}' $temp > $temp2
 mv $temp2 $temp
fi

ntotal=`wc -l $temp | awk '{print $1}'`
if [ $less -ne 1 ] ; then
 echo "=====> $ntotal record in $temp will do linear regression fitting as:"  
 #1.493 -5.69
 head -3 $temp
fi

[ $less -ne 1 ] && echo "=====> Fitting results:" 
if [ $docut -eq 1 ] ; then
 echo "WARNing: R2 value < $cut is set to 0"
fi

if [ $dosen -ne 1 ] ; then
#linear fitting of y=ax+b and R-value
cat $temp | awk '
BEGIN{x=0;y=0;xy=0;x2=0;n=0;y2=0;cut='$cut';moredig='$moredig'}
{
 #WARNing: must modify this script to exclude none-exisits values such as na -. Otherwise, output is not reliable!
 #   awk will cal as: 1+none=1 ; 1*none=0
 if($1!="na"&&$2!="na"&&$1!="-"&&$2!="-"&&$1!="NA"&&$2!="NA"){  #exclude data value as na or -
  x=x+$1
  y=y+$2
  xy=xy+$1*$2
  x2=x2+$1*$1
  y2=y2+$2*$2
  n++
  #print "haha",n,$1,$2,x,y
 }
}
END{
uuu=(n*x2-x*x)*(n*y2-y*y)
if(n>0&&uuu>0){
 a=(n*xy-x*y)/(n*x2-x*x)
 b=(y-a*x)/n
 R=(n*xy-x*y)/sqrt(uuu)
 R2=R*R
 abx=a;if(a<=0){abx=-a}
 if(R2<cut){R2=0}

 if(moredig==1){
  if(b>=0){
   printf("y = %7.6f *x + %7.6f\n",a,b)
  } else {
   bb=-b
   printf("y = %7.6f *x - %7.6f\n",a,bb)
  }
 } else { #moredig
 if(b>=0){
  #print "y =",a,"*x +",b
  if(abx<0.01){
   printf("y = %7.6f *x + %4.3f\n",a,b)
  }else{
   printf("y = %4.3f *x + %4.3f\n",a,b)
  }
 } else {
  bb=-b
  #print "y =",a,"*x -",bb 
  if(abx<0.01){
   printf("y = %7.6f *x - %4.3f\n",a,bb)
  }else{
   printf("y = %4.3f *x - %4.3f\n",a,bb)
  }
 }
 } #moredig

 #print "R2 =",R2
 printf("R2 = %4.3f\n",R2)
} else {
 print "y = NA"
 print "R2 = NA"
}
 print "n =",n 
}'

else #dosen
#Use Sen’s Slope / Theil–Sen estimator to reduce outliers
title=$title' Theil–Sen Estimator'
cat $temp | awk '
BEGIN{x=0;y=0;xy=0;x2=0;n=0;y2=0;cut='$cut';large=99999}
{
 #WARNing: must modify this script to exclude none-exisits values such as na -. Otherwise, output is not reliable!
 #   awk will cal as: 1+none=1 ; 1*none=0
 if($1!="na"&&$2!="na"&&$1!="-"&&$2!="-"&&$1!="NA"&&$2!="NA"){  #exclude data value as na or -
  #x=x+$1
  y=y+$2
  #xy=xy+$1*$2
  #x2=x2+$1*$1
  #y2=y2+$2*$2
  n++
  u[n]=$1;v[n]=$2
 }
}
END{
#Step 1: calculate slopes of each pair
m=0
for(i=1;i<n;i++){
 for(j=(i+1);j<=n;j++){
  m++
  if(u[i]!=u[j]){
   s[m]=(v[i]-v[j])/(u[i]-u[j])
  }else{
   if(v[i]==v[j]){m--}else{s[m]=large}  #bypass same coords point
  }
 }
}

#Step 2: Buble-sort slopes
for(i=1;i<m;i++){
 for(j=(i+1);j<=m;j++){
  if(s[i]>s[j]){
   z=s[i];s[i]=s[j];s[j]=z
  }
 }
}

#Step 3: find median of slopes to get fitted slope a
if(m>0){
 if(int(m/2)==(m/2)){
  z=int(m/2);a=(s[z+1]+s[z-1])/2
 }else{z=int(m/2)+1;a=s[z]}

#Step 4: find intercept b by  b=median of (y−a*x)
 for(i=1;i<=n;i++){
  bi[i]=v[i]-a*u[i]
 }
 for(i=1;i<n;i++){  #buble-sort
  for(j=(i+1);j<=n;j++){
   if(bi[i]>bi[j]){
    z=bi[i];bi[i]=bi[j];bi[j]=z
   }
  }
 }
 if(int(n/2)==(n/2)){ #get median
  z=int(n/2);b=(bi[z+1]+bi[z-1])/2
 }else{z=int(n/2)+1;b=bi[z]}

#Step 5: cal R2 by https://www.wikiwand.com/en/Coefficient_of_determination
 yave=y/n;Stot=0;Sreg=0;Sres=0
 for(i=1;i<=n;i++){
  z=v[i]-yave
  Stot=Stot+z*z #The total sum of squares (proportional to the variance of the data):
  z=a*u[i]+b-yave
  Sreg=Sreg+z*z  #The regression sum of squares, also called the explained sum of squares
  Sres=Sres+(z-v[i])*(z-v[i]) #The sum of squares of residuals, also called the residual sum of squares
 }
 if(Stot!=0){R2=1-Sres/Stot}else{R2="NA"}
} #m>0

#print out
if(m>0){
 abx=x;if(x<=0){abx=-x}
 if(b>=0){
  if(abx<0.01){
   printf("y = %7.6f *x + %4.3f\n",a,b)
  } else {  
   printf("y = %4.3f *x + %4.3f\n",a,b)
  }
 }else{
  if(abx<0.01){
   printf("y = %7.6f *x - %4.3f\n",a,-b)
  } else {
   printf("y = %4.3f *x - %4.3f\n",a,-b)
  }
 }
 printf("R2 = %4.3f\n",R2)
} else {
 print "y = NA"
 print "R2 = NA"
}
print "n =",n
print "m =",m,n*(n-1)/2
}'

fi #dosen

if [ $dognu -eq 1 ] ; then
 awk '{if($1!="na"&&$2!="na"&&$1!="-"&&$2!="-"){print $_}}' $temp > $temp.dat
 ./do_gnuplot -linear $sen -xlabel "$xlabel" -ylabel "$ylabel" -datastyle "points pt 6 ps 1.5" -xcol 1 -ycol 2 -title "$title"  $extra $extra2 $extra3 $temp.dat > $temp
 sleep 3
fi

rm -f $temp* $temp2 $temp3 $temp4 ; exit
