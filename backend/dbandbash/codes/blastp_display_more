#!/bin/sh
#Save all scripts to ~/database/pipeline_script   Script template is ./template 

dotime=1;starts=`date +%s` ; starttime=`date`

thisfile=$0
doout=0
debug=0
cname=0;display=1;head=1;shortname=0
alnonly=0

oldline=$*   #all argvs
oldline1=`awk -v ins="$oldline" 'BEGIN{n=split(ins,a," ");for(i=1;i<n;i++){printf("%s ",a[i])}}'` #remove last argv
if [ -n "$1" ] ; then
 aaa=`echo "$1" | awk '{print substr($1,1,1);exit}'`  #check if first input is -XXX
 while [ "$aaa" == "-" ] ; do
  case $1 in
   -alnonly)alnonly=1;shift;;
   -debug) debug=1; shift;;
   -out) output="$2"; doout=1;shift 2;;  #Use "$2" to pass argments with blank space inside as d='a b c''
   -change)cname=1;shortname=1;shift;;
   -short)shortname=1;shift;;
   -display)display=1;shift;;
   -nodisplay)display=0;shift;;
   -nohead)head=0;shift;;
   *) $0; echo "***Fatal error @ $0! Argument $1 is unrecoginized and ignored : $0 $oldline!" 1>&2 ; exit;;
  esac
  [ -n "$1" ] && aaa=`echo "$1" | awk '{print substr($1,1,1)}'` || aaa='NA'
 done
fi
[ $debug -eq 1 ] && echo $0 $oldline

if [ -n "$1" ] ; then 
 input="$1"
 fasta=$2
else
cat << ttt
    ****NOTE: Copyright belongs to Dr. Hongzhi Li *******

 Modifty ./blastp_display output based on fasta (fill species names and protein name)

Sequences producing significant alignments:
XP_016862233.1 protein polybromo-1 isoform X13 [Homo sapiens]      3509       0.0     100%
XP_016862230.1 protein polybromo-1 isoform X11 [Homo sapiens]      3509       0.0     100%

ALIGNMENTS
>NP_006006.3 AT-rich interactive domain-containing protein 1A isoform a [Homo
sapiens]
Length=2285

 Score = 4586 bits (11894),  Expect = 0.0, Method: Compositional matrix adjust.
 Identities = 2285/2285 (100%), Positives = 2285/2285 (100%), Gaps = 0/2285 (0%)

Query  1     MAAQVAPAAASSLGNPPPPPPSELKKAEQQQREEAGGEAAAAAAAERGEMKAAAGQESEG  60
             MAAQVAPAAASSLGNPPPPPPSELKKAEQQQREEAGGEAAAAAAAERGEMKAAAGQESEG
Sbjct  1     MAAQVAPAAASSLGNPPPPPPSELKKAEQQQREEAGGEAAAAAAAERGEMKAAAGQESEG  60



 Usage: $0 [Options] Input Fasta
 Options:
  -debug : debug model on
  -out Output : User defined output
  -nodisplay | [-display] : No display output
  -nohead : will not add header for format at firstline of output
  -short : change name to shorter ones as abbreaviation as H.sapien M.M.cress
  -change : change some species name to easy reading human, mouse, etc. Otherwise, shrink it as: H.sapien
    NOTE: The name mapping is in species_mapping.txt
  -alnonly : only use data in ALIGNMENTS to extract results. But may miss some aligned proteins as NCBI only return ALIGNMENTS for 100 seqs
    [default]: if ALIGNMENTS has less than (Sequences producing significant alignments), will use the later

 Example: 
  $0 ~/PBRM1/PBRM1.fasta_blastp_landmark.txt
   #more than 100 (Sequences producing significant alignments), will show all of them
  $0 -alnonly -cname -short blastp.txt
   #Also change some species name to easy reading human, mouse, etc.
   #Only show seqs with ALIGNMENTS (at most 100)
ttt
  exit
fi

extension=`echo $input | awk '{n=split($1,a,".");printf(".%s",a[n])}'`
infile=`echo $input | awk '{l=length($1)-3;a=substr($1,l,4);if(a==".pdb"){print substr($1,1,l-1)}else{print $1}}'`
infile=`echo $input | awk '{n=split($1,a,".");printf("%s",a[1]);for(i=2;i<n;i++){printf(".%s",a[i])}}'`
#infile=`basename $input ${extension}`
[ $doout -ne 1 ] && output=$infile'.xls'

#FATAL WARNing: NEVER delete following temp files! Otherwise last line will erase all files * in folder
# Not recommend to define temp=$0'_'$$'.tmp'  as temp has ./ ahead which may cause trouble when re-use it to define temp file name
temp=$$'.tmp';  temp2=$temp'2' ; temp3=$temp'3' ; temp4=$temp'4'; temp5=$temp'5'; temp6=$temp'6'

#Check root folder: scalemp1=p-gpu1; p-ngs=hpc
ed='/home/holi/database/pipeline_script/'
drd='/home/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My old computer
drd='/isi-dcnl/flower_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-ngs2
drd='/isi-flower/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@p-gpu1
drd='/net/isi-dcnl/ifs/user_data/hongzhi/database/pipeline_script/'; [ -d $drd ] && ed=$drd ##holi@hpc-access1.coh.org
drd='/flower_data/hongzhili/database/pipeline_script/'; [ -d $drd ] && ed=$drd #holi@scalemp1
drd='/home/holi/database/pipeline_script/'; [ -d $drd ] && ed=$drd  #My newest computer
thisfolder=`pwd`; thisfolder=$thisfolder'/'
if [ $thisfolder != $ed ] ; then
 cp -f $ed/back $ed/get $ed/species_mapping.txt .
fi

 hasNA=`awk 'BEGIN{s=0}{if($2=="NA"){s++}}END{print s}' $input`
 if [ $hasNA -eq 0 ] ; then
  echo " No need re-process $input"
  exit
 fi

 grep '>' $fasta > $temp
 cp $input $temp2

 cat $temp2 | awk 'BEGIN{cname='$cname';shortname='$shortname';nft=0;m=0
  file="'species_mapping.txt'";  n=0
  while ((getline line < file) > 0) {
   if (substr(line,1,1)!="#"){
    n++; nf=split(line,d,"\t"); a[n]=d[1];b[n]=tolower(d[2])
   }
  }
  close(file)
  file="'$temp'";  m=0
  while ((getline line < file) > 0) {
   if (substr(line,1,1)==">"){
    m++; nf=split(line,d," ");np[m]=substr(d[1],2,99)
    nf=split(line,d,"[");split(d[nf],v,"]");spe[m]=v[1]
    st=length(np[m])+2;ed=index(line,d[nf])-st-1;protein[m]=substr(line,st,ed)
   }
  }
  close(file)

 }{
  did=0
  for(i=1;i<=m;i++){
   if($1==np[i]){
    species=spe[i]
    u=split(species,x," ");species=x[1];for(j=2;j<=u;j++){species=sprintf("%s %s",species,x[j])}  #remove extra spaces in name
    species2=x[1];for(j=2;j<=u;j++){species2=sprintf("%s_%s",species2,x[j])} #In case species name seperated by _
    if(cname==1){
     didname=0
     for(j=1;j<=n;j++){
      if(tolower(species)==b[j]||tolower(species2)==b[j]){species=a[j];didname=1;break}
     }  
    }
    if(shortname==1&&didname==0){
     u=split(species,x," ");sn="";for(j=1;j<u;j++){sn=sprintf("%s%s.",sn,toupper(substr(x[j],1,1)))}
     species=sprintf("%s%s",sn,x[u])
    }    
    printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,species,protein[i])
    did=1
    break
   }
  }
  if(did==0){printf("%s\tError! Not found in fasta\n",$_)}
 }' > $input

if [ "$temp" == "" ] ; then
 echo "FATAL error: temp files are NOT defined: all files in folder could be erased!!! Rewrite $0 script";exit
fi
rm -f $temp* $temp2* $temp3* $temp4* $temp5* $temp6* ; exit  #Do NOT use rm -rf will may delete subfolders

